// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ExData.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ExData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace fantasybit {

namespace {

const ::google::protobuf::Descriptor* SettlePos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SettlePos_reflection_ = NULL;
const ::google::protobuf::Descriptor* StorePos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StorePos_reflection_ = NULL;
const ::google::protobuf::Descriptor* BookPos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BookPos_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameSettlePos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameSettlePos_reflection_ = NULL;
const ::google::protobuf::Descriptor* OrderCore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OrderCore_reflection_ = NULL;
const ::google::protobuf::Descriptor* Order_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Order_reflection_ = NULL;
const ::google::protobuf::Descriptor* OrderFill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OrderFill_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarketTicker_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarketTicker_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MarketTicker_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* TradeTic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TradeTic_reflection_ = NULL;
const ::google::protobuf::Descriptor* DepthFeedDelta_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DepthFeedDelta_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContractOHLC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContractOHLC_reflection_ = NULL;
const ::google::protobuf::Descriptor* DepthItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DepthItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* BookDelta_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BookDelta_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarketQuote_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarketQuote_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarketSnapshot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarketSnapshot_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ExData_2eproto() {
  protobuf_AddDesc_ExData_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ExData.proto");
  GOOGLE_CHECK(file != NULL);
  SettlePos_descriptor_ = file->message_type(0);
  static const int SettlePos_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SettlePos, pk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SettlePos, qty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SettlePos, price_),
  };
  SettlePos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SettlePos_descriptor_,
      SettlePos::default_instance_,
      SettlePos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SettlePos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SettlePos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SettlePos));
  StorePos_descriptor_ = file->message_type(1);
  static const int StorePos_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorePos, qty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorePos, price_),
  };
  StorePos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StorePos_descriptor_,
      StorePos::default_instance_,
      StorePos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorePos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorePos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StorePos));
  BookPos_descriptor_ = file->message_type(2);
  static const int BookPos_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BookPos, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BookPos, positions_),
  };
  BookPos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BookPos_descriptor_,
      BookPos::default_instance_,
      BookPos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BookPos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BookPos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BookPos));
  GameSettlePos_descriptor_ = file->message_type(3);
  static const int GameSettlePos_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSettlePos, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSettlePos, home_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSettlePos, away_),
  };
  GameSettlePos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameSettlePos_descriptor_,
      GameSettlePos::default_instance_,
      GameSettlePos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSettlePos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSettlePos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameSettlePos));
  OrderCore_descriptor_ = file->message_type(4);
  static const int OrderCore_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCore, buyside_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCore, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCore, price_),
  };
  OrderCore_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OrderCore_descriptor_,
      OrderCore::default_instance_,
      OrderCore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCore, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCore, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OrderCore));
  Order_descriptor_ = file->message_type(5);
  static const int Order_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, refnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, core_),
  };
  Order_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Order_descriptor_,
      Order::default_instance_,
      Order_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Order));
  OrderFill_descriptor_ = file->message_type(6);
  static const int OrderFill_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderFill, left_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderFill, fillprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderFill, fillsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderFill, timestamp_),
  };
  OrderFill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OrderFill_descriptor_,
      OrderFill::default_instance_,
      OrderFill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderFill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderFill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OrderFill));
  MarketTicker_descriptor_ = file->message_type(7);
  static const int MarketTicker_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketTicker, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketTicker, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketTicker, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketTicker, price_),
  };
  MarketTicker_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarketTicker_descriptor_,
      MarketTicker::default_instance_,
      MarketTicker_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketTicker, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketTicker, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarketTicker));
  MarketTicker_Type_descriptor_ = MarketTicker_descriptor_->enum_type(0);
  TradeTic_descriptor_ = file->message_type(8);
  static const int TradeTic_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeTic, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeTic, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeTic, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeTic, ishigh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeTic, islow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeTic, change_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeTic, tic_),
  };
  TradeTic_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TradeTic_descriptor_,
      TradeTic::default_instance_,
      TradeTic_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeTic, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeTic, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TradeTic));
  DepthFeedDelta_descriptor_ = file->message_type(9);
  static const int DepthFeedDelta_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthFeedDelta, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthFeedDelta, isbid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthFeedDelta, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthFeedDelta, price_),
  };
  DepthFeedDelta_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DepthFeedDelta_descriptor_,
      DepthFeedDelta::default_instance_,
      DepthFeedDelta_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthFeedDelta, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthFeedDelta, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DepthFeedDelta));
  ContractOHLC_descriptor_ = file->message_type(10);
  static const int ContractOHLC_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContractOHLC, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContractOHLC, open_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContractOHLC, high_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContractOHLC, low_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContractOHLC, close_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContractOHLC, volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContractOHLC, change_),
  };
  ContractOHLC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContractOHLC_descriptor_,
      ContractOHLC::default_instance_,
      ContractOHLC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContractOHLC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContractOHLC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContractOHLC));
  DepthItem_descriptor_ = file->message_type(11);
  static const int DepthItem_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthItem, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthItem, b_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthItem, a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthItem, bs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthItem, as_),
  };
  DepthItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DepthItem_descriptor_,
      DepthItem::default_instance_,
      DepthItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DepthItem));
  BookDelta_descriptor_ = file->message_type(12);
  static const int BookDelta_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BookDelta, fantasy_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BookDelta, seqnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BookDelta, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BookDelta, newnew_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BookDelta, ohlc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BookDelta, removes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BookDelta, level2tic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BookDelta, level1tic_),
  };
  BookDelta_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BookDelta_descriptor_,
      BookDelta::default_instance_,
      BookDelta_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BookDelta, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BookDelta, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BookDelta));
  MarketQuote_descriptor_ = file->message_type(13);
  static const int MarketQuote_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketQuote, bs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketQuote, b_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketQuote, a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketQuote, as_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketQuote, l_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketQuote, ls_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketQuote, udn_),
  };
  MarketQuote_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarketQuote_descriptor_,
      MarketQuote::default_instance_,
      MarketQuote_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketQuote, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketQuote, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarketQuote));
  MarketSnapshot_descriptor_ = file->message_type(14);
  static const int MarketSnapshot_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketSnapshot, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketSnapshot, week_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketSnapshot, depth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketSnapshot, ohlc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketSnapshot, quote_),
  };
  MarketSnapshot_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarketSnapshot_descriptor_,
      MarketSnapshot::default_instance_,
      MarketSnapshot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketSnapshot, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketSnapshot, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarketSnapshot));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ExData_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SettlePos_descriptor_, &SettlePos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StorePos_descriptor_, &StorePos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BookPos_descriptor_, &BookPos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameSettlePos_descriptor_, &GameSettlePos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OrderCore_descriptor_, &OrderCore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Order_descriptor_, &Order::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OrderFill_descriptor_, &OrderFill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarketTicker_descriptor_, &MarketTicker::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TradeTic_descriptor_, &TradeTic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DepthFeedDelta_descriptor_, &DepthFeedDelta::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContractOHLC_descriptor_, &ContractOHLC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DepthItem_descriptor_, &DepthItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BookDelta_descriptor_, &BookDelta::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarketQuote_descriptor_, &MarketQuote::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarketSnapshot_descriptor_, &MarketSnapshot::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ExData_2eproto() {
  delete SettlePos::default_instance_;
  delete SettlePos_reflection_;
  delete StorePos::default_instance_;
  delete StorePos_reflection_;
  delete BookPos::default_instance_;
  delete BookPos_reflection_;
  delete GameSettlePos::default_instance_;
  delete GameSettlePos_reflection_;
  delete OrderCore::default_instance_;
  delete OrderCore_reflection_;
  delete Order::default_instance_;
  delete Order_reflection_;
  delete OrderFill::default_instance_;
  delete OrderFill_reflection_;
  delete MarketTicker::default_instance_;
  delete MarketTicker_reflection_;
  delete TradeTic::default_instance_;
  delete TradeTic_reflection_;
  delete DepthFeedDelta::default_instance_;
  delete DepthFeedDelta_reflection_;
  delete ContractOHLC::default_instance_;
  delete ContractOHLC_reflection_;
  delete DepthItem::default_instance_;
  delete DepthItem_reflection_;
  delete BookDelta::default_instance_;
  delete BookDelta_reflection_;
  delete MarketQuote::default_instance_;
  delete MarketQuote_reflection_;
  delete MarketSnapshot::default_instance_;
  delete MarketSnapshot_reflection_;
}

void protobuf_AddDesc_ExData_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014ExData.proto\022\nfantasybit\"3\n\tSettlePos\022"
    "\n\n\002pk\030\n \001(\t\022\013\n\003qty\030\024 \001(\005\022\r\n\005price\030\031 \001(\005\""
    "&\n\010StorePos\022\013\n\003qty\030\024 \001(\005\022\r\n\005price\030\031 \001(\005\""
    "E\n\007BookPos\022\020\n\010playerid\030\036 \001(\t\022(\n\tposition"
    "s\030( \003(\0132\025.fantasybit.SettlePos\"e\n\rGameSe"
    "ttlePos\022\016\n\006gameid\030\n \001(\t\022!\n\004home\030\024 \003(\0132\023."
    "fantasybit.BookPos\022!\n\004away\030\036 \003(\0132\023.fanta"
    "sybit.BookPos\"9\n\tOrderCore\022\017\n\007buyside\030\n "
    "\001(\010\022\014\n\004size\030\024 \001(\005\022\r\n\005price\030\036 \001(\005\"<\n\005Orde"
    "r\022\016\n\006refnum\030\n \001(\005\022#\n\004core\030\024 \001(\0132\025.fantas"
    "ybit.OrderCore\"d\n\tOrderFill\022\037\n\004left\030\n \001("
    "\0132\021.fantasybit.Order\022\021\n\tfillprice\030\024 \001(\005\022"
    "\020\n\010fillsize\030\036 \001(\005\022\021\n\ttimestamp\030( \001(\005\"\214\001\n"
    "\014MarketTicker\022+\n\004type\030\001 \001(\0162\035.fantasybit"
    ".MarketTicker.Type\022\016\n\006symbol\030\002 \001(\t\022\014\n\004si"
    "ze\030\024 \001(\005\022\r\n\005price\030\036 \001(\005\"\"\n\004Type\022\007\n\003BID\020\001"
    "\022\007\n\003ASK\020\002\022\010\n\004LAST\020\003\"s\n\010TradeTic\022\016\n\006symbo"
    "l\030\002 \001(\t\022\014\n\004size\030\024 \001(\005\022\r\n\005price\030\036 \001(\005\022\016\n\006"
    "ishigh\030( \001(\005\022\r\n\005islow\030- \001(\005\022\016\n\006change\0302 "
    "\001(\005\022\013\n\003tic\030< \001(\005\"L\n\016DepthFeedDelta\022\016\n\006sy"
    "mbol\030\001 \001(\t\022\r\n\005isbid\030\n \001(\010\022\014\n\004size\030\024 \001(\005\022"
    "\r\n\005price\030\036 \001(\005\"v\n\014ContractOHLC\022\016\n\006symbol"
    "\030\n \001(\t\022\014\n\004open\030\024 \001(\005\022\014\n\004high\030\036 \001(\005\022\013\n\003lo"
    "w\030( \001(\005\022\r\n\005close\0302 \001(\005\022\016\n\006volume\030< \001(\005\022\016"
    "\n\006change\030F \001(\005\"H\n\tDepthItem\022\r\n\005level\030\n \001"
    "(\005\022\t\n\001b\030\036 \001(\005\022\t\n\001a\030( \001(\005\022\n\n\002bs\0302 \001(\005\022\n\n\002"
    "as\030< \001(\005\"\220\002\n\tBookDelta\022\024\n\014fantasy_name\030\n"
    " \001(\t\022\016\n\006seqnum\030\024 \001(\005\022\020\n\010playerid\030\036 \001(\t\022%"
    "\n\006newnew\030( \001(\0132\025.fantasybit.OrderCore\022&\n"
    "\004ohlc\030) \001(\0132\030.fantasybit.ContractOHLC\022\"\n"
    "\007removes\0302 \003(\0132\021.fantasybit.Order\022+\n\tlev"
    "el2tic\030< \003(\0132\030.fantasybit.MarketTicker\022+"
    "\n\tlevel1tic\030F \003(\0132\030.fantasybit.MarketTic"
    "ker\"_\n\013MarketQuote\022\n\n\002bs\030\n \001(\005\022\t\n\001b\030\024 \001("
    "\005\022\t\n\001a\030\036 \001(\005\022\n\n\002as\030( \001(\005\022\t\n\001l\0302 \001(\005\022\n\n\002l"
    "s\030< \001(\005\022\013\n\003udn\030F \001(\005\"\244\001\n\016MarketSnapshot\022"
    "\016\n\006symbol\030\n \001(\t\022\014\n\004week\030\013 \001(\005\022$\n\005depth\030F"
    " \003(\0132\025.fantasybit.DepthItem\022&\n\004ohlc\030\024 \001("
    "\0132\030.fantasybit.ContractOHLC\022&\n\005quote\030\036 \001"
    "(\0132\027.fantasybit.MarketQuote", 1587);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ExData.proto", &protobuf_RegisterTypes);
  SettlePos::default_instance_ = new SettlePos();
  StorePos::default_instance_ = new StorePos();
  BookPos::default_instance_ = new BookPos();
  GameSettlePos::default_instance_ = new GameSettlePos();
  OrderCore::default_instance_ = new OrderCore();
  Order::default_instance_ = new Order();
  OrderFill::default_instance_ = new OrderFill();
  MarketTicker::default_instance_ = new MarketTicker();
  TradeTic::default_instance_ = new TradeTic();
  DepthFeedDelta::default_instance_ = new DepthFeedDelta();
  ContractOHLC::default_instance_ = new ContractOHLC();
  DepthItem::default_instance_ = new DepthItem();
  BookDelta::default_instance_ = new BookDelta();
  MarketQuote::default_instance_ = new MarketQuote();
  MarketSnapshot::default_instance_ = new MarketSnapshot();
  SettlePos::default_instance_->InitAsDefaultInstance();
  StorePos::default_instance_->InitAsDefaultInstance();
  BookPos::default_instance_->InitAsDefaultInstance();
  GameSettlePos::default_instance_->InitAsDefaultInstance();
  OrderCore::default_instance_->InitAsDefaultInstance();
  Order::default_instance_->InitAsDefaultInstance();
  OrderFill::default_instance_->InitAsDefaultInstance();
  MarketTicker::default_instance_->InitAsDefaultInstance();
  TradeTic::default_instance_->InitAsDefaultInstance();
  DepthFeedDelta::default_instance_->InitAsDefaultInstance();
  ContractOHLC::default_instance_->InitAsDefaultInstance();
  DepthItem::default_instance_->InitAsDefaultInstance();
  BookDelta::default_instance_->InitAsDefaultInstance();
  MarketQuote::default_instance_->InitAsDefaultInstance();
  MarketSnapshot::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ExData_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ExData_2eproto {
  StaticDescriptorInitializer_ExData_2eproto() {
    protobuf_AddDesc_ExData_2eproto();
  }
} static_descriptor_initializer_ExData_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int SettlePos::kPkFieldNumber;
const int SettlePos::kQtyFieldNumber;
const int SettlePos::kPriceFieldNumber;
#endif  // !_MSC_VER

SettlePos::SettlePos()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SettlePos::InitAsDefaultInstance() {
}

SettlePos::SettlePos(const SettlePos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SettlePos::SharedCtor() {
  _cached_size_ = 0;
  pk_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  qty_ = 0;
  price_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SettlePos::~SettlePos() {
  SharedDtor();
}

void SettlePos::SharedDtor() {
  if (pk_ != &::google::protobuf::internal::kEmptyString) {
    delete pk_;
  }
  if (this != default_instance_) {
  }
}

void SettlePos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SettlePos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SettlePos_descriptor_;
}

const SettlePos& SettlePos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ExData_2eproto();
  return *default_instance_;
}

SettlePos* SettlePos::default_instance_ = NULL;

SettlePos* SettlePos::New() const {
  return new SettlePos;
}

void SettlePos::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_pk()) {
      if (pk_ != &::google::protobuf::internal::kEmptyString) {
        pk_->clear();
      }
    }
    qty_ = 0;
    price_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SettlePos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string pk = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pk()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pk().data(), this->pk().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_qty;
        break;
      }

      // optional int32 qty = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &qty_)));
          set_has_qty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_price;
        break;
      }

      // optional int32 price = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SettlePos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string pk = 10;
  if (has_pk()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pk().data(), this->pk().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->pk(), output);
  }

  // optional int32 qty = 20;
  if (has_qty()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->qty(), output);
  }

  // optional int32 price = 25;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->price(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SettlePos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string pk = 10;
  if (has_pk()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pk().data(), this->pk().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->pk(), target);
  }

  // optional int32 qty = 20;
  if (has_qty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->qty(), target);
  }

  // optional int32 price = 25;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->price(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SettlePos::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string pk = 10;
    if (has_pk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pk());
    }

    // optional int32 qty = 20;
    if (has_qty()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->qty());
    }

    // optional int32 price = 25;
    if (has_price()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SettlePos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SettlePos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SettlePos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SettlePos::MergeFrom(const SettlePos& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pk()) {
      set_pk(from.pk());
    }
    if (from.has_qty()) {
      set_qty(from.qty());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SettlePos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SettlePos::CopyFrom(const SettlePos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SettlePos::IsInitialized() const {

  return true;
}

void SettlePos::Swap(SettlePos* other) {
  if (other != this) {
    std::swap(pk_, other->pk_);
    std::swap(qty_, other->qty_);
    std::swap(price_, other->price_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SettlePos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SettlePos_descriptor_;
  metadata.reflection = SettlePos_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StorePos::kQtyFieldNumber;
const int StorePos::kPriceFieldNumber;
#endif  // !_MSC_VER

StorePos::StorePos()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StorePos::InitAsDefaultInstance() {
}

StorePos::StorePos(const StorePos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StorePos::SharedCtor() {
  _cached_size_ = 0;
  qty_ = 0;
  price_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StorePos::~StorePos() {
  SharedDtor();
}

void StorePos::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StorePos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StorePos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StorePos_descriptor_;
}

const StorePos& StorePos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ExData_2eproto();
  return *default_instance_;
}

StorePos* StorePos::default_instance_ = NULL;

StorePos* StorePos::New() const {
  return new StorePos;
}

void StorePos::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    qty_ = 0;
    price_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StorePos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 qty = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &qty_)));
          set_has_qty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_price;
        break;
      }

      // optional int32 price = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StorePos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 qty = 20;
  if (has_qty()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->qty(), output);
  }

  // optional int32 price = 25;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->price(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StorePos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 qty = 20;
  if (has_qty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->qty(), target);
  }

  // optional int32 price = 25;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->price(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StorePos::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 qty = 20;
    if (has_qty()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->qty());
    }

    // optional int32 price = 25;
    if (has_price()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StorePos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StorePos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StorePos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StorePos::MergeFrom(const StorePos& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_qty()) {
      set_qty(from.qty());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StorePos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StorePos::CopyFrom(const StorePos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StorePos::IsInitialized() const {

  return true;
}

void StorePos::Swap(StorePos* other) {
  if (other != this) {
    std::swap(qty_, other->qty_);
    std::swap(price_, other->price_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StorePos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StorePos_descriptor_;
  metadata.reflection = StorePos_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BookPos::kPlayeridFieldNumber;
const int BookPos::kPositionsFieldNumber;
#endif  // !_MSC_VER

BookPos::BookPos()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BookPos::InitAsDefaultInstance() {
}

BookPos::BookPos(const BookPos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BookPos::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BookPos::~BookPos() {
  SharedDtor();
}

void BookPos::SharedDtor() {
  if (playerid_ != &::google::protobuf::internal::kEmptyString) {
    delete playerid_;
  }
  if (this != default_instance_) {
  }
}

void BookPos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BookPos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BookPos_descriptor_;
}

const BookPos& BookPos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ExData_2eproto();
  return *default_instance_;
}

BookPos* BookPos::default_instance_ = NULL;

BookPos* BookPos::New() const {
  return new BookPos;
}

void BookPos::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_playerid()) {
      if (playerid_ != &::google::protobuf::internal::kEmptyString) {
        playerid_->clear();
      }
    }
  }
  positions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BookPos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string playerid = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playerid().data(), this->playerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(322)) goto parse_positions;
        break;
      }

      // repeated .fantasybit.SettlePos positions = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_positions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_positions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(322)) goto parse_positions;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BookPos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string playerid = 30;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      30, this->playerid(), output);
  }

  // repeated .fantasybit.SettlePos positions = 40;
  for (int i = 0; i < this->positions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      40, this->positions(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BookPos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string playerid = 30;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->playerid(), target);
  }

  // repeated .fantasybit.SettlePos positions = 40;
  for (int i = 0; i < this->positions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        40, this->positions(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BookPos::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string playerid = 30;
    if (has_playerid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playerid());
    }

  }
  // repeated .fantasybit.SettlePos positions = 40;
  total_size += 2 * this->positions_size();
  for (int i = 0; i < this->positions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->positions(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BookPos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BookPos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BookPos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BookPos::MergeFrom(const BookPos& from) {
  GOOGLE_CHECK_NE(&from, this);
  positions_.MergeFrom(from.positions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BookPos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BookPos::CopyFrom(const BookPos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BookPos::IsInitialized() const {

  return true;
}

void BookPos::Swap(BookPos* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    positions_.Swap(&other->positions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BookPos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BookPos_descriptor_;
  metadata.reflection = BookPos_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameSettlePos::kGameidFieldNumber;
const int GameSettlePos::kHomeFieldNumber;
const int GameSettlePos::kAwayFieldNumber;
#endif  // !_MSC_VER

GameSettlePos::GameSettlePos()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameSettlePos::InitAsDefaultInstance() {
}

GameSettlePos::GameSettlePos(const GameSettlePos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameSettlePos::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameSettlePos::~GameSettlePos() {
  SharedDtor();
}

void GameSettlePos::SharedDtor() {
  if (gameid_ != &::google::protobuf::internal::kEmptyString) {
    delete gameid_;
  }
  if (this != default_instance_) {
  }
}

void GameSettlePos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameSettlePos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameSettlePos_descriptor_;
}

const GameSettlePos& GameSettlePos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ExData_2eproto();
  return *default_instance_;
}

GameSettlePos* GameSettlePos::default_instance_ = NULL;

GameSettlePos* GameSettlePos::New() const {
  return new GameSettlePos;
}

void GameSettlePos::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_gameid()) {
      if (gameid_ != &::google::protobuf::internal::kEmptyString) {
        gameid_->clear();
      }
    }
  }
  home_.Clear();
  away_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameSettlePos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string gameid = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gameid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gameid().data(), this->gameid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_home;
        break;
      }

      // repeated .fantasybit.BookPos home = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_home:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_home()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_home;
        if (input->ExpectTag(242)) goto parse_away;
        break;
      }

      // repeated .fantasybit.BookPos away = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_away:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_away()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_away;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameSettlePos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string gameid = 10;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gameid().data(), this->gameid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->gameid(), output);
  }

  // repeated .fantasybit.BookPos home = 20;
  for (int i = 0; i < this->home_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->home(i), output);
  }

  // repeated .fantasybit.BookPos away = 30;
  for (int i = 0; i < this->away_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->away(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameSettlePos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string gameid = 10;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gameid().data(), this->gameid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->gameid(), target);
  }

  // repeated .fantasybit.BookPos home = 20;
  for (int i = 0; i < this->home_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->home(i), target);
  }

  // repeated .fantasybit.BookPos away = 30;
  for (int i = 0; i < this->away_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->away(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameSettlePos::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string gameid = 10;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gameid());
    }

  }
  // repeated .fantasybit.BookPos home = 20;
  total_size += 2 * this->home_size();
  for (int i = 0; i < this->home_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->home(i));
  }

  // repeated .fantasybit.BookPos away = 30;
  total_size += 2 * this->away_size();
  for (int i = 0; i < this->away_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->away(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameSettlePos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameSettlePos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameSettlePos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameSettlePos::MergeFrom(const GameSettlePos& from) {
  GOOGLE_CHECK_NE(&from, this);
  home_.MergeFrom(from.home_);
  away_.MergeFrom(from.away_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameSettlePos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameSettlePos::CopyFrom(const GameSettlePos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameSettlePos::IsInitialized() const {

  return true;
}

void GameSettlePos::Swap(GameSettlePos* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    home_.Swap(&other->home_);
    away_.Swap(&other->away_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameSettlePos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameSettlePos_descriptor_;
  metadata.reflection = GameSettlePos_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OrderCore::kBuysideFieldNumber;
const int OrderCore::kSizeFieldNumber;
const int OrderCore::kPriceFieldNumber;
#endif  // !_MSC_VER

OrderCore::OrderCore()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OrderCore::InitAsDefaultInstance() {
}

OrderCore::OrderCore(const OrderCore& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OrderCore::SharedCtor() {
  _cached_size_ = 0;
  buyside_ = false;
  size_ = 0;
  price_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OrderCore::~OrderCore() {
  SharedDtor();
}

void OrderCore::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OrderCore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OrderCore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrderCore_descriptor_;
}

const OrderCore& OrderCore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ExData_2eproto();
  return *default_instance_;
}

OrderCore* OrderCore::default_instance_ = NULL;

OrderCore* OrderCore::New() const {
  return new OrderCore;
}

void OrderCore::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    buyside_ = false;
    size_ = 0;
    price_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OrderCore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool buyside = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &buyside_)));
          set_has_buyside();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_size;
        break;
      }

      // optional int32 size = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_price;
        break;
      }

      // optional int32 price = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OrderCore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool buyside = 10;
  if (has_buyside()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->buyside(), output);
  }

  // optional int32 size = 20;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->size(), output);
  }

  // optional int32 price = 30;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->price(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OrderCore::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool buyside = 10;
  if (has_buyside()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->buyside(), target);
  }

  // optional int32 size = 20;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->size(), target);
  }

  // optional int32 price = 30;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->price(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OrderCore::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool buyside = 10;
    if (has_buyside()) {
      total_size += 1 + 1;
    }

    // optional int32 size = 20;
    if (has_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size());
    }

    // optional int32 price = 30;
    if (has_price()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrderCore::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OrderCore* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OrderCore*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OrderCore::MergeFrom(const OrderCore& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buyside()) {
      set_buyside(from.buyside());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OrderCore::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderCore::CopyFrom(const OrderCore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderCore::IsInitialized() const {

  return true;
}

void OrderCore::Swap(OrderCore* other) {
  if (other != this) {
    std::swap(buyside_, other->buyside_);
    std::swap(size_, other->size_);
    std::swap(price_, other->price_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OrderCore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OrderCore_descriptor_;
  metadata.reflection = OrderCore_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Order::kRefnumFieldNumber;
const int Order::kCoreFieldNumber;
#endif  // !_MSC_VER

Order::Order()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Order::InitAsDefaultInstance() {
  core_ = const_cast< ::fantasybit::OrderCore*>(&::fantasybit::OrderCore::default_instance());
}

Order::Order(const Order& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Order::SharedCtor() {
  _cached_size_ = 0;
  refnum_ = 0;
  core_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Order::~Order() {
  SharedDtor();
}

void Order::SharedDtor() {
  if (this != default_instance_) {
    delete core_;
  }
}

void Order::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Order::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Order_descriptor_;
}

const Order& Order::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ExData_2eproto();
  return *default_instance_;
}

Order* Order::default_instance_ = NULL;

Order* Order::New() const {
  return new Order;
}

void Order::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    refnum_ = 0;
    if (has_core()) {
      if (core_ != NULL) core_->::fantasybit::OrderCore::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Order::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 refnum = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &refnum_)));
          set_has_refnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_core;
        break;
      }

      // optional .fantasybit.OrderCore core = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_core:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_core()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Order::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 refnum = 10;
  if (has_refnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->refnum(), output);
  }

  // optional .fantasybit.OrderCore core = 20;
  if (has_core()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->core(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Order::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 refnum = 10;
  if (has_refnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->refnum(), target);
  }

  // optional .fantasybit.OrderCore core = 20;
  if (has_core()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->core(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Order::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 refnum = 10;
    if (has_refnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->refnum());
    }

    // optional .fantasybit.OrderCore core = 20;
    if (has_core()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->core());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Order::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Order* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Order*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Order::MergeFrom(const Order& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_refnum()) {
      set_refnum(from.refnum());
    }
    if (from.has_core()) {
      mutable_core()->::fantasybit::OrderCore::MergeFrom(from.core());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Order::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Order::CopyFrom(const Order& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Order::IsInitialized() const {

  return true;
}

void Order::Swap(Order* other) {
  if (other != this) {
    std::swap(refnum_, other->refnum_);
    std::swap(core_, other->core_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Order::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Order_descriptor_;
  metadata.reflection = Order_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OrderFill::kLeftFieldNumber;
const int OrderFill::kFillpriceFieldNumber;
const int OrderFill::kFillsizeFieldNumber;
const int OrderFill::kTimestampFieldNumber;
#endif  // !_MSC_VER

OrderFill::OrderFill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OrderFill::InitAsDefaultInstance() {
  left_ = const_cast< ::fantasybit::Order*>(&::fantasybit::Order::default_instance());
}

OrderFill::OrderFill(const OrderFill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OrderFill::SharedCtor() {
  _cached_size_ = 0;
  left_ = NULL;
  fillprice_ = 0;
  fillsize_ = 0;
  timestamp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OrderFill::~OrderFill() {
  SharedDtor();
}

void OrderFill::SharedDtor() {
  if (this != default_instance_) {
    delete left_;
  }
}

void OrderFill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OrderFill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrderFill_descriptor_;
}

const OrderFill& OrderFill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ExData_2eproto();
  return *default_instance_;
}

OrderFill* OrderFill::default_instance_ = NULL;

OrderFill* OrderFill::New() const {
  return new OrderFill;
}

void OrderFill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_left()) {
      if (left_ != NULL) left_->::fantasybit::Order::Clear();
    }
    fillprice_ = 0;
    fillsize_ = 0;
    timestamp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OrderFill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fantasybit.Order left = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_left()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_fillprice;
        break;
      }

      // optional int32 fillprice = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fillprice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fillprice_)));
          set_has_fillprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_fillsize;
        break;
      }

      // optional int32 fillsize = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fillsize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fillsize_)));
          set_has_fillsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_timestamp;
        break;
      }

      // optional int32 timestamp = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OrderFill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fantasybit.Order left = 10;
  if (has_left()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->left(), output);
  }

  // optional int32 fillprice = 20;
  if (has_fillprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->fillprice(), output);
  }

  // optional int32 fillsize = 30;
  if (has_fillsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->fillsize(), output);
  }

  // optional int32 timestamp = 40;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->timestamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OrderFill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fantasybit.Order left = 10;
  if (has_left()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->left(), target);
  }

  // optional int32 fillprice = 20;
  if (has_fillprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->fillprice(), target);
  }

  // optional int32 fillsize = 30;
  if (has_fillsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->fillsize(), target);
  }

  // optional int32 timestamp = 40;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(40, this->timestamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OrderFill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fantasybit.Order left = 10;
    if (has_left()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->left());
    }

    // optional int32 fillprice = 20;
    if (has_fillprice()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fillprice());
    }

    // optional int32 fillsize = 30;
    if (has_fillsize()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fillsize());
    }

    // optional int32 timestamp = 40;
    if (has_timestamp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timestamp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrderFill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OrderFill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OrderFill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OrderFill::MergeFrom(const OrderFill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_left()) {
      mutable_left()->::fantasybit::Order::MergeFrom(from.left());
    }
    if (from.has_fillprice()) {
      set_fillprice(from.fillprice());
    }
    if (from.has_fillsize()) {
      set_fillsize(from.fillsize());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OrderFill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderFill::CopyFrom(const OrderFill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderFill::IsInitialized() const {

  return true;
}

void OrderFill::Swap(OrderFill* other) {
  if (other != this) {
    std::swap(left_, other->left_);
    std::swap(fillprice_, other->fillprice_);
    std::swap(fillsize_, other->fillsize_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OrderFill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OrderFill_descriptor_;
  metadata.reflection = OrderFill_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* MarketTicker_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarketTicker_Type_descriptor_;
}
bool MarketTicker_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MarketTicker_Type MarketTicker::BID;
const MarketTicker_Type MarketTicker::ASK;
const MarketTicker_Type MarketTicker::LAST;
const MarketTicker_Type MarketTicker::Type_MIN;
const MarketTicker_Type MarketTicker::Type_MAX;
const int MarketTicker::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MarketTicker::kTypeFieldNumber;
const int MarketTicker::kSymbolFieldNumber;
const int MarketTicker::kSizeFieldNumber;
const int MarketTicker::kPriceFieldNumber;
#endif  // !_MSC_VER

MarketTicker::MarketTicker()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MarketTicker::InitAsDefaultInstance() {
}

MarketTicker::MarketTicker(const MarketTicker& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MarketTicker::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  size_ = 0;
  price_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarketTicker::~MarketTicker() {
  SharedDtor();
}

void MarketTicker::SharedDtor() {
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    delete symbol_;
  }
  if (this != default_instance_) {
  }
}

void MarketTicker::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarketTicker::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarketTicker_descriptor_;
}

const MarketTicker& MarketTicker::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ExData_2eproto();
  return *default_instance_;
}

MarketTicker* MarketTicker::default_instance_ = NULL;

MarketTicker* MarketTicker::New() const {
  return new MarketTicker;
}

void MarketTicker::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_symbol()) {
      if (symbol_ != &::google::protobuf::internal::kEmptyString) {
        symbol_->clear();
      }
    }
    size_ = 0;
    price_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarketTicker::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fantasybit.MarketTicker.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fantasybit::MarketTicker_Type_IsValid(value)) {
            set_type(static_cast< ::fantasybit::MarketTicker_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_symbol;
        break;
      }

      // optional string symbol = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_symbol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_size;
        break;
      }

      // optional int32 size = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_price;
        break;
      }

      // optional int32 price = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MarketTicker::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fantasybit.MarketTicker.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string symbol = 2;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->symbol(), output);
  }

  // optional int32 size = 20;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->size(), output);
  }

  // optional int32 price = 30;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->price(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MarketTicker::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fantasybit.MarketTicker.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional string symbol = 2;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->symbol(), target);
  }

  // optional int32 size = 20;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->size(), target);
  }

  // optional int32 price = 30;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->price(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MarketTicker::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fantasybit.MarketTicker.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string symbol = 2;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }

    // optional int32 size = 20;
    if (has_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size());
    }

    // optional int32 price = 30;
    if (has_price()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarketTicker::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarketTicker* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarketTicker*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarketTicker::MergeFrom(const MarketTicker& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_symbol()) {
      set_symbol(from.symbol());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarketTicker::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketTicker::CopyFrom(const MarketTicker& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketTicker::IsInitialized() const {

  return true;
}

void MarketTicker::Swap(MarketTicker* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(symbol_, other->symbol_);
    std::swap(size_, other->size_);
    std::swap(price_, other->price_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarketTicker::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarketTicker_descriptor_;
  metadata.reflection = MarketTicker_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TradeTic::kSymbolFieldNumber;
const int TradeTic::kSizeFieldNumber;
const int TradeTic::kPriceFieldNumber;
const int TradeTic::kIshighFieldNumber;
const int TradeTic::kIslowFieldNumber;
const int TradeTic::kChangeFieldNumber;
const int TradeTic::kTicFieldNumber;
#endif  // !_MSC_VER

TradeTic::TradeTic()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TradeTic::InitAsDefaultInstance() {
}

TradeTic::TradeTic(const TradeTic& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TradeTic::SharedCtor() {
  _cached_size_ = 0;
  symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  size_ = 0;
  price_ = 0;
  ishigh_ = 0;
  islow_ = 0;
  change_ = 0;
  tic_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TradeTic::~TradeTic() {
  SharedDtor();
}

void TradeTic::SharedDtor() {
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    delete symbol_;
  }
  if (this != default_instance_) {
  }
}

void TradeTic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TradeTic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TradeTic_descriptor_;
}

const TradeTic& TradeTic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ExData_2eproto();
  return *default_instance_;
}

TradeTic* TradeTic::default_instance_ = NULL;

TradeTic* TradeTic::New() const {
  return new TradeTic;
}

void TradeTic::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_symbol()) {
      if (symbol_ != &::google::protobuf::internal::kEmptyString) {
        symbol_->clear();
      }
    }
    size_ = 0;
    price_ = 0;
    ishigh_ = 0;
    islow_ = 0;
    change_ = 0;
    tic_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TradeTic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string symbol = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_size;
        break;
      }

      // optional int32 size = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_price;
        break;
      }

      // optional int32 price = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_ishigh;
        break;
      }

      // optional int32 ishigh = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ishigh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ishigh_)));
          set_has_ishigh();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(360)) goto parse_islow;
        break;
      }

      // optional int32 islow = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_islow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &islow_)));
          set_has_islow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(400)) goto parse_change;
        break;
      }

      // optional int32 change = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_change:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &change_)));
          set_has_change();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(480)) goto parse_tic;
        break;
      }

      // optional int32 tic = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tic_)));
          set_has_tic();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TradeTic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string symbol = 2;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->symbol(), output);
  }

  // optional int32 size = 20;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->size(), output);
  }

  // optional int32 price = 30;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->price(), output);
  }

  // optional int32 ishigh = 40;
  if (has_ishigh()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->ishigh(), output);
  }

  // optional int32 islow = 45;
  if (has_islow()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(45, this->islow(), output);
  }

  // optional int32 change = 50;
  if (has_change()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(50, this->change(), output);
  }

  // optional int32 tic = 60;
  if (has_tic()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(60, this->tic(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TradeTic::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string symbol = 2;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->symbol(), target);
  }

  // optional int32 size = 20;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->size(), target);
  }

  // optional int32 price = 30;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->price(), target);
  }

  // optional int32 ishigh = 40;
  if (has_ishigh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(40, this->ishigh(), target);
  }

  // optional int32 islow = 45;
  if (has_islow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(45, this->islow(), target);
  }

  // optional int32 change = 50;
  if (has_change()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(50, this->change(), target);
  }

  // optional int32 tic = 60;
  if (has_tic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(60, this->tic(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TradeTic::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string symbol = 2;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }

    // optional int32 size = 20;
    if (has_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size());
    }

    // optional int32 price = 30;
    if (has_price()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price());
    }

    // optional int32 ishigh = 40;
    if (has_ishigh()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ishigh());
    }

    // optional int32 islow = 45;
    if (has_islow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->islow());
    }

    // optional int32 change = 50;
    if (has_change()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->change());
    }

    // optional int32 tic = 60;
    if (has_tic()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tic());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TradeTic::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TradeTic* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TradeTic*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TradeTic::MergeFrom(const TradeTic& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_symbol()) {
      set_symbol(from.symbol());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_ishigh()) {
      set_ishigh(from.ishigh());
    }
    if (from.has_islow()) {
      set_islow(from.islow());
    }
    if (from.has_change()) {
      set_change(from.change());
    }
    if (from.has_tic()) {
      set_tic(from.tic());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TradeTic::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradeTic::CopyFrom(const TradeTic& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradeTic::IsInitialized() const {

  return true;
}

void TradeTic::Swap(TradeTic* other) {
  if (other != this) {
    std::swap(symbol_, other->symbol_);
    std::swap(size_, other->size_);
    std::swap(price_, other->price_);
    std::swap(ishigh_, other->ishigh_);
    std::swap(islow_, other->islow_);
    std::swap(change_, other->change_);
    std::swap(tic_, other->tic_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TradeTic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TradeTic_descriptor_;
  metadata.reflection = TradeTic_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DepthFeedDelta::kSymbolFieldNumber;
const int DepthFeedDelta::kIsbidFieldNumber;
const int DepthFeedDelta::kSizeFieldNumber;
const int DepthFeedDelta::kPriceFieldNumber;
#endif  // !_MSC_VER

DepthFeedDelta::DepthFeedDelta()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DepthFeedDelta::InitAsDefaultInstance() {
}

DepthFeedDelta::DepthFeedDelta(const DepthFeedDelta& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DepthFeedDelta::SharedCtor() {
  _cached_size_ = 0;
  symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isbid_ = false;
  size_ = 0;
  price_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DepthFeedDelta::~DepthFeedDelta() {
  SharedDtor();
}

void DepthFeedDelta::SharedDtor() {
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    delete symbol_;
  }
  if (this != default_instance_) {
  }
}

void DepthFeedDelta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DepthFeedDelta::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DepthFeedDelta_descriptor_;
}

const DepthFeedDelta& DepthFeedDelta::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ExData_2eproto();
  return *default_instance_;
}

DepthFeedDelta* DepthFeedDelta::default_instance_ = NULL;

DepthFeedDelta* DepthFeedDelta::New() const {
  return new DepthFeedDelta;
}

void DepthFeedDelta::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_symbol()) {
      if (symbol_ != &::google::protobuf::internal::kEmptyString) {
        symbol_->clear();
      }
    }
    isbid_ = false;
    size_ = 0;
    price_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DepthFeedDelta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string symbol = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_isbid;
        break;
      }

      // optional bool isbid = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isbid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isbid_)));
          set_has_isbid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_size;
        break;
      }

      // optional int32 size = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_price;
        break;
      }

      // optional int32 price = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DepthFeedDelta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string symbol = 1;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->symbol(), output);
  }

  // optional bool isbid = 10;
  if (has_isbid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->isbid(), output);
  }

  // optional int32 size = 20;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->size(), output);
  }

  // optional int32 price = 30;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->price(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DepthFeedDelta::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string symbol = 1;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->symbol(), target);
  }

  // optional bool isbid = 10;
  if (has_isbid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->isbid(), target);
  }

  // optional int32 size = 20;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->size(), target);
  }

  // optional int32 price = 30;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->price(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DepthFeedDelta::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string symbol = 1;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }

    // optional bool isbid = 10;
    if (has_isbid()) {
      total_size += 1 + 1;
    }

    // optional int32 size = 20;
    if (has_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size());
    }

    // optional int32 price = 30;
    if (has_price()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DepthFeedDelta::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DepthFeedDelta* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DepthFeedDelta*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DepthFeedDelta::MergeFrom(const DepthFeedDelta& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_symbol()) {
      set_symbol(from.symbol());
    }
    if (from.has_isbid()) {
      set_isbid(from.isbid());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DepthFeedDelta::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DepthFeedDelta::CopyFrom(const DepthFeedDelta& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DepthFeedDelta::IsInitialized() const {

  return true;
}

void DepthFeedDelta::Swap(DepthFeedDelta* other) {
  if (other != this) {
    std::swap(symbol_, other->symbol_);
    std::swap(isbid_, other->isbid_);
    std::swap(size_, other->size_);
    std::swap(price_, other->price_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DepthFeedDelta::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DepthFeedDelta_descriptor_;
  metadata.reflection = DepthFeedDelta_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContractOHLC::kSymbolFieldNumber;
const int ContractOHLC::kOpenFieldNumber;
const int ContractOHLC::kHighFieldNumber;
const int ContractOHLC::kLowFieldNumber;
const int ContractOHLC::kCloseFieldNumber;
const int ContractOHLC::kVolumeFieldNumber;
const int ContractOHLC::kChangeFieldNumber;
#endif  // !_MSC_VER

ContractOHLC::ContractOHLC()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContractOHLC::InitAsDefaultInstance() {
}

ContractOHLC::ContractOHLC(const ContractOHLC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContractOHLC::SharedCtor() {
  _cached_size_ = 0;
  symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  open_ = 0;
  high_ = 0;
  low_ = 0;
  close_ = 0;
  volume_ = 0;
  change_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContractOHLC::~ContractOHLC() {
  SharedDtor();
}

void ContractOHLC::SharedDtor() {
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    delete symbol_;
  }
  if (this != default_instance_) {
  }
}

void ContractOHLC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContractOHLC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContractOHLC_descriptor_;
}

const ContractOHLC& ContractOHLC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ExData_2eproto();
  return *default_instance_;
}

ContractOHLC* ContractOHLC::default_instance_ = NULL;

ContractOHLC* ContractOHLC::New() const {
  return new ContractOHLC;
}

void ContractOHLC::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_symbol()) {
      if (symbol_ != &::google::protobuf::internal::kEmptyString) {
        symbol_->clear();
      }
    }
    open_ = 0;
    high_ = 0;
    low_ = 0;
    close_ = 0;
    volume_ = 0;
    change_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContractOHLC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string symbol = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_open;
        break;
      }

      // optional int32 open = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &open_)));
          set_has_open();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_high;
        break;
      }

      // optional int32 high = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_high:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &high_)));
          set_has_high();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_low;
        break;
      }

      // optional int32 low = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_low:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &low_)));
          set_has_low();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(400)) goto parse_close;
        break;
      }

      // optional int32 close = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_close:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &close_)));
          set_has_close();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(480)) goto parse_volume;
        break;
      }

      // optional int32 volume = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volume_)));
          set_has_volume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(560)) goto parse_change;
        break;
      }

      // optional int32 change = 70;
      case 70: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_change:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &change_)));
          set_has_change();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContractOHLC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string symbol = 10;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->symbol(), output);
  }

  // optional int32 open = 20;
  if (has_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->open(), output);
  }

  // optional int32 high = 30;
  if (has_high()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->high(), output);
  }

  // optional int32 low = 40;
  if (has_low()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->low(), output);
  }

  // optional int32 close = 50;
  if (has_close()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(50, this->close(), output);
  }

  // optional int32 volume = 60;
  if (has_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(60, this->volume(), output);
  }

  // optional int32 change = 70;
  if (has_change()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(70, this->change(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContractOHLC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string symbol = 10;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->symbol(), target);
  }

  // optional int32 open = 20;
  if (has_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->open(), target);
  }

  // optional int32 high = 30;
  if (has_high()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->high(), target);
  }

  // optional int32 low = 40;
  if (has_low()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(40, this->low(), target);
  }

  // optional int32 close = 50;
  if (has_close()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(50, this->close(), target);
  }

  // optional int32 volume = 60;
  if (has_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(60, this->volume(), target);
  }

  // optional int32 change = 70;
  if (has_change()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(70, this->change(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContractOHLC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string symbol = 10;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }

    // optional int32 open = 20;
    if (has_open()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->open());
    }

    // optional int32 high = 30;
    if (has_high()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->high());
    }

    // optional int32 low = 40;
    if (has_low()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->low());
    }

    // optional int32 close = 50;
    if (has_close()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->close());
    }

    // optional int32 volume = 60;
    if (has_volume()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->volume());
    }

    // optional int32 change = 70;
    if (has_change()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->change());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContractOHLC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContractOHLC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContractOHLC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContractOHLC::MergeFrom(const ContractOHLC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_symbol()) {
      set_symbol(from.symbol());
    }
    if (from.has_open()) {
      set_open(from.open());
    }
    if (from.has_high()) {
      set_high(from.high());
    }
    if (from.has_low()) {
      set_low(from.low());
    }
    if (from.has_close()) {
      set_close(from.close());
    }
    if (from.has_volume()) {
      set_volume(from.volume());
    }
    if (from.has_change()) {
      set_change(from.change());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContractOHLC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContractOHLC::CopyFrom(const ContractOHLC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContractOHLC::IsInitialized() const {

  return true;
}

void ContractOHLC::Swap(ContractOHLC* other) {
  if (other != this) {
    std::swap(symbol_, other->symbol_);
    std::swap(open_, other->open_);
    std::swap(high_, other->high_);
    std::swap(low_, other->low_);
    std::swap(close_, other->close_);
    std::swap(volume_, other->volume_);
    std::swap(change_, other->change_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContractOHLC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContractOHLC_descriptor_;
  metadata.reflection = ContractOHLC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DepthItem::kLevelFieldNumber;
const int DepthItem::kBFieldNumber;
const int DepthItem::kAFieldNumber;
const int DepthItem::kBsFieldNumber;
const int DepthItem::kAsFieldNumber;
#endif  // !_MSC_VER

DepthItem::DepthItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DepthItem::InitAsDefaultInstance() {
}

DepthItem::DepthItem(const DepthItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DepthItem::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0;
  b_ = 0;
  a_ = 0;
  bs_ = 0;
  as_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DepthItem::~DepthItem() {
  SharedDtor();
}

void DepthItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DepthItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DepthItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DepthItem_descriptor_;
}

const DepthItem& DepthItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ExData_2eproto();
  return *default_instance_;
}

DepthItem* DepthItem::default_instance_ = NULL;

DepthItem* DepthItem::New() const {
  return new DepthItem;
}

void DepthItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0;
    b_ = 0;
    a_ = 0;
    bs_ = 0;
    as_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DepthItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 level = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_b;
        break;
      }

      // optional int32 b = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_b:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &b_)));
          set_has_b();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_a;
        break;
      }

      // optional int32 a = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_a:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &a_)));
          set_has_a();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(400)) goto parse_bs;
        break;
      }

      // optional int32 bs = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bs_)));
          set_has_bs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(480)) goto parse_as;
        break;
      }

      // optional int32 as = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_as:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &as_)));
          set_has_as();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DepthItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 level = 10;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->level(), output);
  }

  // optional int32 b = 30;
  if (has_b()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->b(), output);
  }

  // optional int32 a = 40;
  if (has_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->a(), output);
  }

  // optional int32 bs = 50;
  if (has_bs()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(50, this->bs(), output);
  }

  // optional int32 as = 60;
  if (has_as()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(60, this->as(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DepthItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 level = 10;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->level(), target);
  }

  // optional int32 b = 30;
  if (has_b()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->b(), target);
  }

  // optional int32 a = 40;
  if (has_a()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(40, this->a(), target);
  }

  // optional int32 bs = 50;
  if (has_bs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(50, this->bs(), target);
  }

  // optional int32 as = 60;
  if (has_as()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(60, this->as(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DepthItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 level = 10;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 b = 30;
    if (has_b()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->b());
    }

    // optional int32 a = 40;
    if (has_a()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->a());
    }

    // optional int32 bs = 50;
    if (has_bs()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bs());
    }

    // optional int32 as = 60;
    if (has_as()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->as());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DepthItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DepthItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DepthItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DepthItem::MergeFrom(const DepthItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_b()) {
      set_b(from.b());
    }
    if (from.has_a()) {
      set_a(from.a());
    }
    if (from.has_bs()) {
      set_bs(from.bs());
    }
    if (from.has_as()) {
      set_as(from.as());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DepthItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DepthItem::CopyFrom(const DepthItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DepthItem::IsInitialized() const {

  return true;
}

void DepthItem::Swap(DepthItem* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(b_, other->b_);
    std::swap(a_, other->a_);
    std::swap(bs_, other->bs_);
    std::swap(as_, other->as_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DepthItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DepthItem_descriptor_;
  metadata.reflection = DepthItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BookDelta::kFantasyNameFieldNumber;
const int BookDelta::kSeqnumFieldNumber;
const int BookDelta::kPlayeridFieldNumber;
const int BookDelta::kNewnewFieldNumber;
const int BookDelta::kOhlcFieldNumber;
const int BookDelta::kRemovesFieldNumber;
const int BookDelta::kLevel2TicFieldNumber;
const int BookDelta::kLevel1TicFieldNumber;
#endif  // !_MSC_VER

BookDelta::BookDelta()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BookDelta::InitAsDefaultInstance() {
  newnew_ = const_cast< ::fantasybit::OrderCore*>(&::fantasybit::OrderCore::default_instance());
  ohlc_ = const_cast< ::fantasybit::ContractOHLC*>(&::fantasybit::ContractOHLC::default_instance());
}

BookDelta::BookDelta(const BookDelta& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BookDelta::SharedCtor() {
  _cached_size_ = 0;
  fantasy_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  seqnum_ = 0;
  playerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  newnew_ = NULL;
  ohlc_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BookDelta::~BookDelta() {
  SharedDtor();
}

void BookDelta::SharedDtor() {
  if (fantasy_name_ != &::google::protobuf::internal::kEmptyString) {
    delete fantasy_name_;
  }
  if (playerid_ != &::google::protobuf::internal::kEmptyString) {
    delete playerid_;
  }
  if (this != default_instance_) {
    delete newnew_;
    delete ohlc_;
  }
}

void BookDelta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BookDelta::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BookDelta_descriptor_;
}

const BookDelta& BookDelta::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ExData_2eproto();
  return *default_instance_;
}

BookDelta* BookDelta::default_instance_ = NULL;

BookDelta* BookDelta::New() const {
  return new BookDelta;
}

void BookDelta::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_fantasy_name()) {
      if (fantasy_name_ != &::google::protobuf::internal::kEmptyString) {
        fantasy_name_->clear();
      }
    }
    seqnum_ = 0;
    if (has_playerid()) {
      if (playerid_ != &::google::protobuf::internal::kEmptyString) {
        playerid_->clear();
      }
    }
    if (has_newnew()) {
      if (newnew_ != NULL) newnew_->::fantasybit::OrderCore::Clear();
    }
    if (has_ohlc()) {
      if (ohlc_ != NULL) ohlc_->::fantasybit::ContractOHLC::Clear();
    }
  }
  removes_.Clear();
  level2tic_.Clear();
  level1tic_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BookDelta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string fantasy_name = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fantasy_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fantasy_name().data(), this->fantasy_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_seqnum;
        break;
      }

      // optional int32 seqnum = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seqnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seqnum_)));
          set_has_seqnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_playerid;
        break;
      }

      // optional string playerid = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playerid().data(), this->playerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(322)) goto parse_newnew;
        break;
      }

      // optional .fantasybit.OrderCore newnew = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_newnew:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_newnew()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(330)) goto parse_ohlc;
        break;
      }

      // optional .fantasybit.ContractOHLC ohlc = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ohlc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ohlc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(402)) goto parse_removes;
        break;
      }

      // repeated .fantasybit.Order removes = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_removes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_removes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(402)) goto parse_removes;
        if (input->ExpectTag(482)) goto parse_level2tic;
        break;
      }

      // repeated .fantasybit.MarketTicker level2tic = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_level2tic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_level2tic()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(482)) goto parse_level2tic;
        if (input->ExpectTag(562)) goto parse_level1tic;
        break;
      }

      // repeated .fantasybit.MarketTicker level1tic = 70;
      case 70: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_level1tic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_level1tic()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(562)) goto parse_level1tic;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BookDelta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string fantasy_name = 10;
  if (has_fantasy_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fantasy_name().data(), this->fantasy_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->fantasy_name(), output);
  }

  // optional int32 seqnum = 20;
  if (has_seqnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->seqnum(), output);
  }

  // optional string playerid = 30;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      30, this->playerid(), output);
  }

  // optional .fantasybit.OrderCore newnew = 40;
  if (has_newnew()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      40, this->newnew(), output);
  }

  // optional .fantasybit.ContractOHLC ohlc = 41;
  if (has_ohlc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      41, this->ohlc(), output);
  }

  // repeated .fantasybit.Order removes = 50;
  for (int i = 0; i < this->removes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      50, this->removes(i), output);
  }

  // repeated .fantasybit.MarketTicker level2tic = 60;
  for (int i = 0; i < this->level2tic_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      60, this->level2tic(i), output);
  }

  // repeated .fantasybit.MarketTicker level1tic = 70;
  for (int i = 0; i < this->level1tic_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      70, this->level1tic(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BookDelta::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string fantasy_name = 10;
  if (has_fantasy_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fantasy_name().data(), this->fantasy_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->fantasy_name(), target);
  }

  // optional int32 seqnum = 20;
  if (has_seqnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->seqnum(), target);
  }

  // optional string playerid = 30;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->playerid(), target);
  }

  // optional .fantasybit.OrderCore newnew = 40;
  if (has_newnew()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        40, this->newnew(), target);
  }

  // optional .fantasybit.ContractOHLC ohlc = 41;
  if (has_ohlc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        41, this->ohlc(), target);
  }

  // repeated .fantasybit.Order removes = 50;
  for (int i = 0; i < this->removes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        50, this->removes(i), target);
  }

  // repeated .fantasybit.MarketTicker level2tic = 60;
  for (int i = 0; i < this->level2tic_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        60, this->level2tic(i), target);
  }

  // repeated .fantasybit.MarketTicker level1tic = 70;
  for (int i = 0; i < this->level1tic_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        70, this->level1tic(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BookDelta::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string fantasy_name = 10;
    if (has_fantasy_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fantasy_name());
    }

    // optional int32 seqnum = 20;
    if (has_seqnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seqnum());
    }

    // optional string playerid = 30;
    if (has_playerid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playerid());
    }

    // optional .fantasybit.OrderCore newnew = 40;
    if (has_newnew()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->newnew());
    }

    // optional .fantasybit.ContractOHLC ohlc = 41;
    if (has_ohlc()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ohlc());
    }

  }
  // repeated .fantasybit.Order removes = 50;
  total_size += 2 * this->removes_size();
  for (int i = 0; i < this->removes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->removes(i));
  }

  // repeated .fantasybit.MarketTicker level2tic = 60;
  total_size += 2 * this->level2tic_size();
  for (int i = 0; i < this->level2tic_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->level2tic(i));
  }

  // repeated .fantasybit.MarketTicker level1tic = 70;
  total_size += 2 * this->level1tic_size();
  for (int i = 0; i < this->level1tic_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->level1tic(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BookDelta::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BookDelta* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BookDelta*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BookDelta::MergeFrom(const BookDelta& from) {
  GOOGLE_CHECK_NE(&from, this);
  removes_.MergeFrom(from.removes_);
  level2tic_.MergeFrom(from.level2tic_);
  level1tic_.MergeFrom(from.level1tic_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fantasy_name()) {
      set_fantasy_name(from.fantasy_name());
    }
    if (from.has_seqnum()) {
      set_seqnum(from.seqnum());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_newnew()) {
      mutable_newnew()->::fantasybit::OrderCore::MergeFrom(from.newnew());
    }
    if (from.has_ohlc()) {
      mutable_ohlc()->::fantasybit::ContractOHLC::MergeFrom(from.ohlc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BookDelta::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BookDelta::CopyFrom(const BookDelta& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BookDelta::IsInitialized() const {

  return true;
}

void BookDelta::Swap(BookDelta* other) {
  if (other != this) {
    std::swap(fantasy_name_, other->fantasy_name_);
    std::swap(seqnum_, other->seqnum_);
    std::swap(playerid_, other->playerid_);
    std::swap(newnew_, other->newnew_);
    std::swap(ohlc_, other->ohlc_);
    removes_.Swap(&other->removes_);
    level2tic_.Swap(&other->level2tic_);
    level1tic_.Swap(&other->level1tic_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BookDelta::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BookDelta_descriptor_;
  metadata.reflection = BookDelta_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarketQuote::kBsFieldNumber;
const int MarketQuote::kBFieldNumber;
const int MarketQuote::kAFieldNumber;
const int MarketQuote::kAsFieldNumber;
const int MarketQuote::kLFieldNumber;
const int MarketQuote::kLsFieldNumber;
const int MarketQuote::kUdnFieldNumber;
#endif  // !_MSC_VER

MarketQuote::MarketQuote()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MarketQuote::InitAsDefaultInstance() {
}

MarketQuote::MarketQuote(const MarketQuote& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MarketQuote::SharedCtor() {
  _cached_size_ = 0;
  bs_ = 0;
  b_ = 0;
  a_ = 0;
  as_ = 0;
  l_ = 0;
  ls_ = 0;
  udn_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarketQuote::~MarketQuote() {
  SharedDtor();
}

void MarketQuote::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MarketQuote::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarketQuote::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarketQuote_descriptor_;
}

const MarketQuote& MarketQuote::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ExData_2eproto();
  return *default_instance_;
}

MarketQuote* MarketQuote::default_instance_ = NULL;

MarketQuote* MarketQuote::New() const {
  return new MarketQuote;
}

void MarketQuote::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bs_ = 0;
    b_ = 0;
    a_ = 0;
    as_ = 0;
    l_ = 0;
    ls_ = 0;
    udn_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarketQuote::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 bs = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bs_)));
          set_has_bs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_b;
        break;
      }

      // optional int32 b = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_b:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &b_)));
          set_has_b();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_a;
        break;
      }

      // optional int32 a = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_a:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &a_)));
          set_has_a();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_as;
        break;
      }

      // optional int32 as = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_as:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &as_)));
          set_has_as();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(400)) goto parse_l;
        break;
      }

      // optional int32 l = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_l:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &l_)));
          set_has_l();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(480)) goto parse_ls;
        break;
      }

      // optional int32 ls = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ls:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ls_)));
          set_has_ls();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(560)) goto parse_udn;
        break;
      }

      // optional int32 udn = 70;
      case 70: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_udn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &udn_)));
          set_has_udn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MarketQuote::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 bs = 10;
  if (has_bs()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->bs(), output);
  }

  // optional int32 b = 20;
  if (has_b()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->b(), output);
  }

  // optional int32 a = 30;
  if (has_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->a(), output);
  }

  // optional int32 as = 40;
  if (has_as()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->as(), output);
  }

  // optional int32 l = 50;
  if (has_l()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(50, this->l(), output);
  }

  // optional int32 ls = 60;
  if (has_ls()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(60, this->ls(), output);
  }

  // optional int32 udn = 70;
  if (has_udn()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(70, this->udn(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MarketQuote::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 bs = 10;
  if (has_bs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->bs(), target);
  }

  // optional int32 b = 20;
  if (has_b()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->b(), target);
  }

  // optional int32 a = 30;
  if (has_a()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->a(), target);
  }

  // optional int32 as = 40;
  if (has_as()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(40, this->as(), target);
  }

  // optional int32 l = 50;
  if (has_l()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(50, this->l(), target);
  }

  // optional int32 ls = 60;
  if (has_ls()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(60, this->ls(), target);
  }

  // optional int32 udn = 70;
  if (has_udn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(70, this->udn(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MarketQuote::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 bs = 10;
    if (has_bs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bs());
    }

    // optional int32 b = 20;
    if (has_b()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->b());
    }

    // optional int32 a = 30;
    if (has_a()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->a());
    }

    // optional int32 as = 40;
    if (has_as()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->as());
    }

    // optional int32 l = 50;
    if (has_l()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->l());
    }

    // optional int32 ls = 60;
    if (has_ls()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ls());
    }

    // optional int32 udn = 70;
    if (has_udn()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->udn());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarketQuote::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarketQuote* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarketQuote*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarketQuote::MergeFrom(const MarketQuote& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bs()) {
      set_bs(from.bs());
    }
    if (from.has_b()) {
      set_b(from.b());
    }
    if (from.has_a()) {
      set_a(from.a());
    }
    if (from.has_as()) {
      set_as(from.as());
    }
    if (from.has_l()) {
      set_l(from.l());
    }
    if (from.has_ls()) {
      set_ls(from.ls());
    }
    if (from.has_udn()) {
      set_udn(from.udn());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarketQuote::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketQuote::CopyFrom(const MarketQuote& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketQuote::IsInitialized() const {

  return true;
}

void MarketQuote::Swap(MarketQuote* other) {
  if (other != this) {
    std::swap(bs_, other->bs_);
    std::swap(b_, other->b_);
    std::swap(a_, other->a_);
    std::swap(as_, other->as_);
    std::swap(l_, other->l_);
    std::swap(ls_, other->ls_);
    std::swap(udn_, other->udn_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarketQuote::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarketQuote_descriptor_;
  metadata.reflection = MarketQuote_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarketSnapshot::kSymbolFieldNumber;
const int MarketSnapshot::kWeekFieldNumber;
const int MarketSnapshot::kDepthFieldNumber;
const int MarketSnapshot::kOhlcFieldNumber;
const int MarketSnapshot::kQuoteFieldNumber;
#endif  // !_MSC_VER

MarketSnapshot::MarketSnapshot()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MarketSnapshot::InitAsDefaultInstance() {
  ohlc_ = const_cast< ::fantasybit::ContractOHLC*>(&::fantasybit::ContractOHLC::default_instance());
  quote_ = const_cast< ::fantasybit::MarketQuote*>(&::fantasybit::MarketQuote::default_instance());
}

MarketSnapshot::MarketSnapshot(const MarketSnapshot& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MarketSnapshot::SharedCtor() {
  _cached_size_ = 0;
  symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  week_ = 0;
  ohlc_ = NULL;
  quote_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarketSnapshot::~MarketSnapshot() {
  SharedDtor();
}

void MarketSnapshot::SharedDtor() {
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    delete symbol_;
  }
  if (this != default_instance_) {
    delete ohlc_;
    delete quote_;
  }
}

void MarketSnapshot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarketSnapshot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarketSnapshot_descriptor_;
}

const MarketSnapshot& MarketSnapshot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ExData_2eproto();
  return *default_instance_;
}

MarketSnapshot* MarketSnapshot::default_instance_ = NULL;

MarketSnapshot* MarketSnapshot::New() const {
  return new MarketSnapshot;
}

void MarketSnapshot::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_symbol()) {
      if (symbol_ != &::google::protobuf::internal::kEmptyString) {
        symbol_->clear();
      }
    }
    week_ = 0;
    if (has_ohlc()) {
      if (ohlc_ != NULL) ohlc_->::fantasybit::ContractOHLC::Clear();
    }
    if (has_quote()) {
      if (quote_ != NULL) quote_->::fantasybit::MarketQuote::Clear();
    }
  }
  depth_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarketSnapshot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string symbol = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_week;
        break;
      }

      // optional int32 week = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_week:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &week_)));
          set_has_week();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_ohlc;
        break;
      }

      // optional .fantasybit.ContractOHLC ohlc = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ohlc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ohlc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_quote;
        break;
      }

      // optional .fantasybit.MarketQuote quote = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_quote:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_quote()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(562)) goto parse_depth;
        break;
      }

      // repeated .fantasybit.DepthItem depth = 70;
      case 70: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_depth:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_depth()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(562)) goto parse_depth;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MarketSnapshot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string symbol = 10;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->symbol(), output);
  }

  // optional int32 week = 11;
  if (has_week()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->week(), output);
  }

  // optional .fantasybit.ContractOHLC ohlc = 20;
  if (has_ohlc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->ohlc(), output);
  }

  // optional .fantasybit.MarketQuote quote = 30;
  if (has_quote()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->quote(), output);
  }

  // repeated .fantasybit.DepthItem depth = 70;
  for (int i = 0; i < this->depth_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      70, this->depth(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MarketSnapshot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string symbol = 10;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->symbol(), target);
  }

  // optional int32 week = 11;
  if (has_week()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->week(), target);
  }

  // optional .fantasybit.ContractOHLC ohlc = 20;
  if (has_ohlc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->ohlc(), target);
  }

  // optional .fantasybit.MarketQuote quote = 30;
  if (has_quote()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->quote(), target);
  }

  // repeated .fantasybit.DepthItem depth = 70;
  for (int i = 0; i < this->depth_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        70, this->depth(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MarketSnapshot::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string symbol = 10;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }

    // optional int32 week = 11;
    if (has_week()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->week());
    }

    // optional .fantasybit.ContractOHLC ohlc = 20;
    if (has_ohlc()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ohlc());
    }

    // optional .fantasybit.MarketQuote quote = 30;
    if (has_quote()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->quote());
    }

  }
  // repeated .fantasybit.DepthItem depth = 70;
  total_size += 2 * this->depth_size();
  for (int i = 0; i < this->depth_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->depth(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarketSnapshot::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarketSnapshot* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarketSnapshot*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarketSnapshot::MergeFrom(const MarketSnapshot& from) {
  GOOGLE_CHECK_NE(&from, this);
  depth_.MergeFrom(from.depth_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_symbol()) {
      set_symbol(from.symbol());
    }
    if (from.has_week()) {
      set_week(from.week());
    }
    if (from.has_ohlc()) {
      mutable_ohlc()->::fantasybit::ContractOHLC::MergeFrom(from.ohlc());
    }
    if (from.has_quote()) {
      mutable_quote()->::fantasybit::MarketQuote::MergeFrom(from.quote());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarketSnapshot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketSnapshot::CopyFrom(const MarketSnapshot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketSnapshot::IsInitialized() const {

  return true;
}

void MarketSnapshot::Swap(MarketSnapshot* other) {
  if (other != this) {
    std::swap(symbol_, other->symbol_);
    std::swap(week_, other->week_);
    depth_.Swap(&other->depth_);
    std::swap(ohlc_, other->ohlc_);
    std::swap(quote_, other->quote_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarketSnapshot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarketSnapshot_descriptor_;
  metadata.reflection = MarketSnapshot_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace fantasybit

// @@protoc_insertion_point(global_scope)
