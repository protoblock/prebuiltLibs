// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: StaticData.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "StaticData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace fantasybit {

namespace {

const ::google::protobuf::Descriptor* PlayerBase_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerBase_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* WeeklySchedule_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WeeklySchedule_reflection_ = NULL;
const ::google::protobuf::Descriptor* Kstats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Kstats_reflection_ = NULL;
const ::google::protobuf::Descriptor* Dstats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Dstats_reflection_ = NULL;
const ::google::protobuf::Descriptor* Ostats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Ostats_reflection_ = NULL;
const ::google::protobuf::Descriptor* Stats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Stats_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameResult_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_StaticData_2eproto() {
  protobuf_AddDesc_StaticData_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "StaticData.proto");
  GOOGLE_CHECK(file != NULL);
  PlayerBase_descriptor_ = file->message_type(0);
  static const int PlayerBase_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBase, first_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBase, last_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBase, position_),
  };
  PlayerBase_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerBase_descriptor_,
      PlayerBase::default_instance_,
      PlayerBase_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBase, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBase, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerBase));
  GameInfo_descriptor_ = file->message_type(1);
  static const int GameInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfo, home_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfo, away_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfo, time_),
  };
  GameInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameInfo_descriptor_,
      GameInfo::default_instance_,
      GameInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameInfo));
  WeeklySchedule_descriptor_ = file->message_type(2);
  static const int WeeklySchedule_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeeklySchedule, games_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeeklySchedule, byes_),
  };
  WeeklySchedule_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WeeklySchedule_descriptor_,
      WeeklySchedule::default_instance_,
      WeeklySchedule_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeeklySchedule, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeeklySchedule, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WeeklySchedule));
  Kstats_descriptor_ = file->message_type(3);
  static const int Kstats_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Kstats, pa_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Kstats, fg_),
  };
  Kstats_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Kstats_descriptor_,
      Kstats::default_instance_,
      Kstats_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Kstats, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Kstats, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Kstats));
  Dstats_descriptor_ = file->message_type(4);
  static const int Dstats_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dstats, twopt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dstats, onept_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dstats, deftd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dstats, sfty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dstats, turnovers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dstats, sacks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dstats, ptsa_),
  };
  Dstats_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Dstats_descriptor_,
      Dstats::default_instance_,
      Dstats_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dstats, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dstats, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Dstats));
  Ostats_descriptor_ = file->message_type(5);
  static const int Ostats_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ostats, passyds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ostats, passtd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ostats, rushyds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ostats, rushtd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ostats, recyds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ostats, rectd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ostats, rec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ostats, pint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ostats, fumble_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ostats, twopt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ostats, onept_),
  };
  Ostats_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Ostats_descriptor_,
      Ostats::default_instance_,
      Ostats_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ostats, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ostats, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Ostats));
  Stats_descriptor_ = file->message_type(6);
  static const int Stats_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stats, ostats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stats, dstats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stats, kstats_),
  };
  Stats_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Stats_descriptor_,
      Stats::default_instance_,
      Stats_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stats, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stats, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Stats));
  PlayerResult_descriptor_ = file->message_type(7);
  static const int PlayerResult_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerResult, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerResult, stats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerResult, fantaybitaward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerResult, fantasybitpnl_),
  };
  PlayerResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerResult_descriptor_,
      PlayerResult::default_instance_,
      PlayerResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerResult));
  GameResult_descriptor_ = file->message_type(8);
  static const int GameResult_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameResult, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameResult, home_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameResult, away_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameResult, kickofftime_),
  };
  GameResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameResult_descriptor_,
      GameResult::default_instance_,
      GameResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameResult));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_StaticData_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerBase_descriptor_, &PlayerBase::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameInfo_descriptor_, &GameInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WeeklySchedule_descriptor_, &WeeklySchedule::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Kstats_descriptor_, &Kstats::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Dstats_descriptor_, &Dstats::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Ostats_descriptor_, &Ostats::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Stats_descriptor_, &Stats::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerResult_descriptor_, &PlayerResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameResult_descriptor_, &GameResult::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_StaticData_2eproto() {
  delete PlayerBase::default_instance_;
  delete PlayerBase_reflection_;
  delete GameInfo::default_instance_;
  delete GameInfo_reflection_;
  delete WeeklySchedule::default_instance_;
  delete WeeklySchedule_reflection_;
  delete Kstats::default_instance_;
  delete Kstats_reflection_;
  delete Dstats::default_instance_;
  delete Dstats_reflection_;
  delete Ostats::default_instance_;
  delete Ostats_reflection_;
  delete Stats::default_instance_;
  delete Stats_reflection_;
  delete PlayerResult::default_instance_;
  delete PlayerResult_reflection_;
  delete GameResult::default_instance_;
  delete GameResult_reflection_;
}

void protobuf_AddDesc_StaticData_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::fantasybit::protobuf_AddDesc_NameData_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020StaticData.proto\022\nfantasybit\032\016NameData"
    ".proto\";\n\nPlayerBase\022\r\n\005first\030\036 \001(\t\022\014\n\004l"
    "ast\030( \001(\t\022\020\n\010position\0302 \001(\t\"@\n\010GameInfo\022"
    "\n\n\002id\030\n \001(\t\022\014\n\004home\030\024 \001(\t\022\014\n\004away\030\036 \001(\t\022"
    "\014\n\004time\030( \001(\r\"C\n\016WeeklySchedule\022#\n\005games"
    "\030\n \003(\0132\024.fantasybit.GameInfo\022\014\n\004byes\030\024 \003"
    "(\t\" \n\006Kstats\022\n\n\002pa\030\n \001(\005\022\n\n\002fg\030\024 \003(\005\"w\n\006"
    "Dstats\022\r\n\005twopt\030d \001(\005\022\r\n\005onept\030n \001(\005\022\r\n\005"
    "deftd\030x \001(\005\022\r\n\004sfty\030\202\001 \001(\005\022\022\n\tturnovers\030"
    "\214\001 \001(\005\022\016\n\005sacks\030\226\001 \001(\005\022\r\n\004ptsa\030\240\001 \001(\005\"\262\001"
    "\n\006Ostats\022\017\n\007passyds\030\n \001(\005\022\016\n\006passtd\030\024 \001("
    "\005\022\017\n\007rushyds\030\036 \001(\005\022\016\n\006rushtd\030( \001(\005\022\016\n\006re"
    "cyds\0302 \001(\005\022\r\n\005rectd\030< \001(\005\022\013\n\003rec\030F \001(\005\022\014"
    "\n\004pint\030P \001(\005\022\016\n\006fumble\030Z \001(\005\022\r\n\005twopt\030d "
    "\001(\005\022\r\n\005onept\030n \001(\005\"s\n\005Stats\022\"\n\006ostats\030\n "
    "\001(\0132\022.fantasybit.Ostats\022\"\n\006dstats\030\024 \001(\0132"
    "\022.fantasybit.Dstats\022\"\n\006kstats\030\036 \001(\0132\022.fa"
    "ntasybit.Kstats\"\271\001\n\014PlayerResult\022\020\n\010play"
    "erid\030\024 \001(\t\022\016\n\006result\030( \001(\002\022 \n\005stats\0302 \001("
    "\0132\021.fantasybit.Stats\0223\n\016fantaybitaward\030<"
    " \003(\0132\033.fantasybit.FantasyBitAward\0220\n\rfan"
    "tasybitpnl\030F \003(\0132\031.fantasybit.FantasyBit"
    "Pnl\"\217\001\n\nGameResult\022\016\n\006gameid\030\001 \001(\t\022-\n\013ho"
    "me_result\030\n \003(\0132\030.fantasybit.PlayerResul"
    "t\022-\n\013away_result\030\024 \003(\0132\030.fantasybit.Play"
    "erResult\022\023\n\013kickofftime\030\036 \001(\r", 1029);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "StaticData.proto", &protobuf_RegisterTypes);
  PlayerBase::default_instance_ = new PlayerBase();
  GameInfo::default_instance_ = new GameInfo();
  WeeklySchedule::default_instance_ = new WeeklySchedule();
  Kstats::default_instance_ = new Kstats();
  Dstats::default_instance_ = new Dstats();
  Ostats::default_instance_ = new Ostats();
  Stats::default_instance_ = new Stats();
  PlayerResult::default_instance_ = new PlayerResult();
  GameResult::default_instance_ = new GameResult();
  PlayerBase::default_instance_->InitAsDefaultInstance();
  GameInfo::default_instance_->InitAsDefaultInstance();
  WeeklySchedule::default_instance_->InitAsDefaultInstance();
  Kstats::default_instance_->InitAsDefaultInstance();
  Dstats::default_instance_->InitAsDefaultInstance();
  Ostats::default_instance_->InitAsDefaultInstance();
  Stats::default_instance_->InitAsDefaultInstance();
  PlayerResult::default_instance_->InitAsDefaultInstance();
  GameResult::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_StaticData_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_StaticData_2eproto {
  StaticDescriptorInitializer_StaticData_2eproto() {
    protobuf_AddDesc_StaticData_2eproto();
  }
} static_descriptor_initializer_StaticData_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PlayerBase::kFirstFieldNumber;
const int PlayerBase::kLastFieldNumber;
const int PlayerBase::kPositionFieldNumber;
#endif  // !_MSC_VER

PlayerBase::PlayerBase()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerBase::InitAsDefaultInstance() {
}

PlayerBase::PlayerBase(const PlayerBase& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerBase::SharedCtor() {
  _cached_size_ = 0;
  first_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  last_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  position_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerBase::~PlayerBase() {
  SharedDtor();
}

void PlayerBase::SharedDtor() {
  if (first_ != &::google::protobuf::internal::kEmptyString) {
    delete first_;
  }
  if (last_ != &::google::protobuf::internal::kEmptyString) {
    delete last_;
  }
  if (position_ != &::google::protobuf::internal::kEmptyString) {
    delete position_;
  }
  if (this != default_instance_) {
  }
}

void PlayerBase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerBase::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerBase_descriptor_;
}

const PlayerBase& PlayerBase::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StaticData_2eproto();
  return *default_instance_;
}

PlayerBase* PlayerBase::default_instance_ = NULL;

PlayerBase* PlayerBase::New() const {
  return new PlayerBase;
}

void PlayerBase::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_first()) {
      if (first_ != &::google::protobuf::internal::kEmptyString) {
        first_->clear();
      }
    }
    if (has_last()) {
      if (last_ != &::google::protobuf::internal::kEmptyString) {
        last_->clear();
      }
    }
    if (has_position()) {
      if (position_ != &::google::protobuf::internal::kEmptyString) {
        position_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerBase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string first = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_first()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->first().data(), this->first().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(322)) goto parse_last;
        break;
      }

      // optional string last = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_last:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_last()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->last().data(), this->last().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(402)) goto parse_position;
        break;
      }

      // optional string position = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_position()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->position().data(), this->position().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerBase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string first = 30;
  if (has_first()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->first().data(), this->first().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      30, this->first(), output);
  }

  // optional string last = 40;
  if (has_last()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->last().data(), this->last().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      40, this->last(), output);
  }

  // optional string position = 50;
  if (has_position()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->position().data(), this->position().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      50, this->position(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerBase::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string first = 30;
  if (has_first()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->first().data(), this->first().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->first(), target);
  }

  // optional string last = 40;
  if (has_last()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->last().data(), this->last().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        40, this->last(), target);
  }

  // optional string position = 50;
  if (has_position()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->position().data(), this->position().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        50, this->position(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerBase::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string first = 30;
    if (has_first()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->first());
    }

    // optional string last = 40;
    if (has_last()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->last());
    }

    // optional string position = 50;
    if (has_position()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->position());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerBase::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerBase* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerBase*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerBase::MergeFrom(const PlayerBase& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_first()) {
      set_first(from.first());
    }
    if (from.has_last()) {
      set_last(from.last());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerBase::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerBase::CopyFrom(const PlayerBase& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerBase::IsInitialized() const {

  return true;
}

void PlayerBase::Swap(PlayerBase* other) {
  if (other != this) {
    std::swap(first_, other->first_);
    std::swap(last_, other->last_);
    std::swap(position_, other->position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerBase::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerBase_descriptor_;
  metadata.reflection = PlayerBase_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameInfo::kIdFieldNumber;
const int GameInfo::kHomeFieldNumber;
const int GameInfo::kAwayFieldNumber;
const int GameInfo::kTimeFieldNumber;
#endif  // !_MSC_VER

GameInfo::GameInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameInfo::InitAsDefaultInstance() {
}

GameInfo::GameInfo(const GameInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  home_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  away_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameInfo::~GameInfo() {
  SharedDtor();
}

void GameInfo::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (home_ != &::google::protobuf::internal::kEmptyString) {
    delete home_;
  }
  if (away_ != &::google::protobuf::internal::kEmptyString) {
    delete away_;
  }
  if (this != default_instance_) {
  }
}

void GameInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameInfo_descriptor_;
}

const GameInfo& GameInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StaticData_2eproto();
  return *default_instance_;
}

GameInfo* GameInfo::default_instance_ = NULL;

GameInfo* GameInfo::New() const {
  return new GameInfo;
}

void GameInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    if (has_home()) {
      if (home_ != &::google::protobuf::internal::kEmptyString) {
        home_->clear();
      }
    }
    if (has_away()) {
      if (away_ != &::google::protobuf::internal::kEmptyString) {
        away_->clear();
      }
    }
    time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_home;
        break;
      }

      // optional string home = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_home:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_home()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->home().data(), this->home().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_away;
        break;
      }

      // optional string away = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_away:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_away()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->away().data(), this->away().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_time;
        break;
      }

      // optional uint32 time = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string id = 10;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->id(), output);
  }

  // optional string home = 20;
  if (has_home()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->home().data(), this->home().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->home(), output);
  }

  // optional string away = 30;
  if (has_away()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->away().data(), this->away().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      30, this->away(), output);
  }

  // optional uint32 time = 40;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(40, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string id = 10;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->id(), target);
  }

  // optional string home = 20;
  if (has_home()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->home().data(), this->home().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->home(), target);
  }

  // optional string away = 30;
  if (has_away()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->away().data(), this->away().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->away(), target);
  }

  // optional uint32 time = 40;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(40, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string id = 10;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string home = 20;
    if (has_home()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->home());
    }

    // optional string away = 30;
    if (has_away()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->away());
    }

    // optional uint32 time = 40;
    if (has_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameInfo::MergeFrom(const GameInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_home()) {
      set_home(from.home());
    }
    if (from.has_away()) {
      set_away(from.away());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameInfo::CopyFrom(const GameInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameInfo::IsInitialized() const {

  return true;
}

void GameInfo::Swap(GameInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(home_, other->home_);
    std::swap(away_, other->away_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameInfo_descriptor_;
  metadata.reflection = GameInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WeeklySchedule::kGamesFieldNumber;
const int WeeklySchedule::kByesFieldNumber;
#endif  // !_MSC_VER

WeeklySchedule::WeeklySchedule()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WeeklySchedule::InitAsDefaultInstance() {
}

WeeklySchedule::WeeklySchedule(const WeeklySchedule& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WeeklySchedule::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WeeklySchedule::~WeeklySchedule() {
  SharedDtor();
}

void WeeklySchedule::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WeeklySchedule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WeeklySchedule::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WeeklySchedule_descriptor_;
}

const WeeklySchedule& WeeklySchedule::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StaticData_2eproto();
  return *default_instance_;
}

WeeklySchedule* WeeklySchedule::default_instance_ = NULL;

WeeklySchedule* WeeklySchedule::New() const {
  return new WeeklySchedule;
}

void WeeklySchedule::Clear() {
  games_.Clear();
  byes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WeeklySchedule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .fantasybit.GameInfo games = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_games:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_games()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_games;
        if (input->ExpectTag(162)) goto parse_byes;
        break;
      }

      // repeated string byes = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_byes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_byes()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->byes(this->byes_size() - 1).data(),
            this->byes(this->byes_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_byes;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WeeklySchedule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .fantasybit.GameInfo games = 10;
  for (int i = 0; i < this->games_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->games(i), output);
  }

  // repeated string byes = 20;
  for (int i = 0; i < this->byes_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->byes(i).data(), this->byes(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->byes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WeeklySchedule::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .fantasybit.GameInfo games = 10;
  for (int i = 0; i < this->games_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->games(i), target);
  }

  // repeated string byes = 20;
  for (int i = 0; i < this->byes_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->byes(i).data(), this->byes(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(20, this->byes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WeeklySchedule::ByteSize() const {
  int total_size = 0;

  // repeated .fantasybit.GameInfo games = 10;
  total_size += 1 * this->games_size();
  for (int i = 0; i < this->games_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->games(i));
  }

  // repeated string byes = 20;
  total_size += 2 * this->byes_size();
  for (int i = 0; i < this->byes_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->byes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeeklySchedule::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WeeklySchedule* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WeeklySchedule*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WeeklySchedule::MergeFrom(const WeeklySchedule& from) {
  GOOGLE_CHECK_NE(&from, this);
  games_.MergeFrom(from.games_);
  byes_.MergeFrom(from.byes_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WeeklySchedule::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeeklySchedule::CopyFrom(const WeeklySchedule& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeeklySchedule::IsInitialized() const {

  return true;
}

void WeeklySchedule::Swap(WeeklySchedule* other) {
  if (other != this) {
    games_.Swap(&other->games_);
    byes_.Swap(&other->byes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WeeklySchedule::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WeeklySchedule_descriptor_;
  metadata.reflection = WeeklySchedule_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Kstats::kPaFieldNumber;
const int Kstats::kFgFieldNumber;
#endif  // !_MSC_VER

Kstats::Kstats()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Kstats::InitAsDefaultInstance() {
}

Kstats::Kstats(const Kstats& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Kstats::SharedCtor() {
  _cached_size_ = 0;
  pa_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Kstats::~Kstats() {
  SharedDtor();
}

void Kstats::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Kstats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Kstats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Kstats_descriptor_;
}

const Kstats& Kstats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StaticData_2eproto();
  return *default_instance_;
}

Kstats* Kstats::default_instance_ = NULL;

Kstats* Kstats::New() const {
  return new Kstats;
}

void Kstats::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pa_ = 0;
  }
  fg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Kstats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 pa = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pa_)));
          set_has_pa();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_fg;
        break;
      }

      // repeated int32 fg = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 160, input, this->mutable_fg())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_fg())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_fg;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Kstats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 pa = 10;
  if (has_pa()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->pa(), output);
  }

  // repeated int32 fg = 20;
  for (int i = 0; i < this->fg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      20, this->fg(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Kstats::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 pa = 10;
  if (has_pa()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->pa(), target);
  }

  // repeated int32 fg = 20;
  for (int i = 0; i < this->fg_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(20, this->fg(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Kstats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 pa = 10;
    if (has_pa()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pa());
    }

  }
  // repeated int32 fg = 20;
  {
    int data_size = 0;
    for (int i = 0; i < this->fg_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->fg(i));
    }
    total_size += 2 * this->fg_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Kstats::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Kstats* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Kstats*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Kstats::MergeFrom(const Kstats& from) {
  GOOGLE_CHECK_NE(&from, this);
  fg_.MergeFrom(from.fg_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pa()) {
      set_pa(from.pa());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Kstats::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Kstats::CopyFrom(const Kstats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Kstats::IsInitialized() const {

  return true;
}

void Kstats::Swap(Kstats* other) {
  if (other != this) {
    std::swap(pa_, other->pa_);
    fg_.Swap(&other->fg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Kstats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Kstats_descriptor_;
  metadata.reflection = Kstats_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Dstats::kTwoptFieldNumber;
const int Dstats::kOneptFieldNumber;
const int Dstats::kDeftdFieldNumber;
const int Dstats::kSftyFieldNumber;
const int Dstats::kTurnoversFieldNumber;
const int Dstats::kSacksFieldNumber;
const int Dstats::kPtsaFieldNumber;
#endif  // !_MSC_VER

Dstats::Dstats()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Dstats::InitAsDefaultInstance() {
}

Dstats::Dstats(const Dstats& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Dstats::SharedCtor() {
  _cached_size_ = 0;
  twopt_ = 0;
  onept_ = 0;
  deftd_ = 0;
  sfty_ = 0;
  turnovers_ = 0;
  sacks_ = 0;
  ptsa_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Dstats::~Dstats() {
  SharedDtor();
}

void Dstats::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Dstats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Dstats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Dstats_descriptor_;
}

const Dstats& Dstats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StaticData_2eproto();
  return *default_instance_;
}

Dstats* Dstats::default_instance_ = NULL;

Dstats* Dstats::New() const {
  return new Dstats;
}

void Dstats::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    twopt_ = 0;
    onept_ = 0;
    deftd_ = 0;
    sfty_ = 0;
    turnovers_ = 0;
    sacks_ = 0;
    ptsa_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Dstats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 twopt = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &twopt_)));
          set_has_twopt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(880)) goto parse_onept;
        break;
      }

      // optional int32 onept = 110;
      case 110: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_onept:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &onept_)));
          set_has_onept();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(960)) goto parse_deftd;
        break;
      }

      // optional int32 deftd = 120;
      case 120: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deftd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deftd_)));
          set_has_deftd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1040)) goto parse_sfty;
        break;
      }

      // optional int32 sfty = 130;
      case 130: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sfty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sfty_)));
          set_has_sfty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1120)) goto parse_turnovers;
        break;
      }

      // optional int32 turnovers = 140;
      case 140: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_turnovers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &turnovers_)));
          set_has_turnovers();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1200)) goto parse_sacks;
        break;
      }

      // optional int32 sacks = 150;
      case 150: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sacks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sacks_)));
          set_has_sacks();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1280)) goto parse_ptsa;
        break;
      }

      // optional int32 ptsa = 160;
      case 160: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ptsa:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ptsa_)));
          set_has_ptsa();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Dstats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 twopt = 100;
  if (has_twopt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(100, this->twopt(), output);
  }

  // optional int32 onept = 110;
  if (has_onept()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(110, this->onept(), output);
  }

  // optional int32 deftd = 120;
  if (has_deftd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(120, this->deftd(), output);
  }

  // optional int32 sfty = 130;
  if (has_sfty()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(130, this->sfty(), output);
  }

  // optional int32 turnovers = 140;
  if (has_turnovers()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(140, this->turnovers(), output);
  }

  // optional int32 sacks = 150;
  if (has_sacks()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(150, this->sacks(), output);
  }

  // optional int32 ptsa = 160;
  if (has_ptsa()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(160, this->ptsa(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Dstats::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 twopt = 100;
  if (has_twopt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(100, this->twopt(), target);
  }

  // optional int32 onept = 110;
  if (has_onept()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(110, this->onept(), target);
  }

  // optional int32 deftd = 120;
  if (has_deftd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(120, this->deftd(), target);
  }

  // optional int32 sfty = 130;
  if (has_sfty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(130, this->sfty(), target);
  }

  // optional int32 turnovers = 140;
  if (has_turnovers()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(140, this->turnovers(), target);
  }

  // optional int32 sacks = 150;
  if (has_sacks()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(150, this->sacks(), target);
  }

  // optional int32 ptsa = 160;
  if (has_ptsa()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(160, this->ptsa(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Dstats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 twopt = 100;
    if (has_twopt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->twopt());
    }

    // optional int32 onept = 110;
    if (has_onept()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->onept());
    }

    // optional int32 deftd = 120;
    if (has_deftd()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->deftd());
    }

    // optional int32 sfty = 130;
    if (has_sfty()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sfty());
    }

    // optional int32 turnovers = 140;
    if (has_turnovers()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->turnovers());
    }

    // optional int32 sacks = 150;
    if (has_sacks()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sacks());
    }

    // optional int32 ptsa = 160;
    if (has_ptsa()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ptsa());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Dstats::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Dstats* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Dstats*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Dstats::MergeFrom(const Dstats& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_twopt()) {
      set_twopt(from.twopt());
    }
    if (from.has_onept()) {
      set_onept(from.onept());
    }
    if (from.has_deftd()) {
      set_deftd(from.deftd());
    }
    if (from.has_sfty()) {
      set_sfty(from.sfty());
    }
    if (from.has_turnovers()) {
      set_turnovers(from.turnovers());
    }
    if (from.has_sacks()) {
      set_sacks(from.sacks());
    }
    if (from.has_ptsa()) {
      set_ptsa(from.ptsa());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Dstats::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dstats::CopyFrom(const Dstats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dstats::IsInitialized() const {

  return true;
}

void Dstats::Swap(Dstats* other) {
  if (other != this) {
    std::swap(twopt_, other->twopt_);
    std::swap(onept_, other->onept_);
    std::swap(deftd_, other->deftd_);
    std::swap(sfty_, other->sfty_);
    std::swap(turnovers_, other->turnovers_);
    std::swap(sacks_, other->sacks_);
    std::swap(ptsa_, other->ptsa_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Dstats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Dstats_descriptor_;
  metadata.reflection = Dstats_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Ostats::kPassydsFieldNumber;
const int Ostats::kPasstdFieldNumber;
const int Ostats::kRushydsFieldNumber;
const int Ostats::kRushtdFieldNumber;
const int Ostats::kRecydsFieldNumber;
const int Ostats::kRectdFieldNumber;
const int Ostats::kRecFieldNumber;
const int Ostats::kPintFieldNumber;
const int Ostats::kFumbleFieldNumber;
const int Ostats::kTwoptFieldNumber;
const int Ostats::kOneptFieldNumber;
#endif  // !_MSC_VER

Ostats::Ostats()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Ostats::InitAsDefaultInstance() {
}

Ostats::Ostats(const Ostats& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Ostats::SharedCtor() {
  _cached_size_ = 0;
  passyds_ = 0;
  passtd_ = 0;
  rushyds_ = 0;
  rushtd_ = 0;
  recyds_ = 0;
  rectd_ = 0;
  rec_ = 0;
  pint_ = 0;
  fumble_ = 0;
  twopt_ = 0;
  onept_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Ostats::~Ostats() {
  SharedDtor();
}

void Ostats::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Ostats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ostats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ostats_descriptor_;
}

const Ostats& Ostats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StaticData_2eproto();
  return *default_instance_;
}

Ostats* Ostats::default_instance_ = NULL;

Ostats* Ostats::New() const {
  return new Ostats;
}

void Ostats::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    passyds_ = 0;
    passtd_ = 0;
    rushyds_ = 0;
    rushtd_ = 0;
    recyds_ = 0;
    rectd_ = 0;
    rec_ = 0;
    pint_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    fumble_ = 0;
    twopt_ = 0;
    onept_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Ostats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 passyds = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &passyds_)));
          set_has_passyds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_passtd;
        break;
      }

      // optional int32 passtd = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_passtd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &passtd_)));
          set_has_passtd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_rushyds;
        break;
      }

      // optional int32 rushyds = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rushyds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rushyds_)));
          set_has_rushyds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_rushtd;
        break;
      }

      // optional int32 rushtd = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rushtd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rushtd_)));
          set_has_rushtd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(400)) goto parse_recyds;
        break;
      }

      // optional int32 recyds = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recyds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recyds_)));
          set_has_recyds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(480)) goto parse_rectd;
        break;
      }

      // optional int32 rectd = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rectd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rectd_)));
          set_has_rectd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(560)) goto parse_rec;
        break;
      }

      // optional int32 rec = 70;
      case 70: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rec_)));
          set_has_rec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(640)) goto parse_pint;
        break;
      }

      // optional int32 pint = 80;
      case 80: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pint_)));
          set_has_pint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(720)) goto parse_fumble;
        break;
      }

      // optional int32 fumble = 90;
      case 90: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fumble:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fumble_)));
          set_has_fumble();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(800)) goto parse_twopt;
        break;
      }

      // optional int32 twopt = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_twopt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &twopt_)));
          set_has_twopt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(880)) goto parse_onept;
        break;
      }

      // optional int32 onept = 110;
      case 110: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_onept:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &onept_)));
          set_has_onept();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Ostats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 passyds = 10;
  if (has_passyds()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->passyds(), output);
  }

  // optional int32 passtd = 20;
  if (has_passtd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->passtd(), output);
  }

  // optional int32 rushyds = 30;
  if (has_rushyds()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->rushyds(), output);
  }

  // optional int32 rushtd = 40;
  if (has_rushtd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->rushtd(), output);
  }

  // optional int32 recyds = 50;
  if (has_recyds()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(50, this->recyds(), output);
  }

  // optional int32 rectd = 60;
  if (has_rectd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(60, this->rectd(), output);
  }

  // optional int32 rec = 70;
  if (has_rec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(70, this->rec(), output);
  }

  // optional int32 pint = 80;
  if (has_pint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(80, this->pint(), output);
  }

  // optional int32 fumble = 90;
  if (has_fumble()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(90, this->fumble(), output);
  }

  // optional int32 twopt = 100;
  if (has_twopt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(100, this->twopt(), output);
  }

  // optional int32 onept = 110;
  if (has_onept()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(110, this->onept(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Ostats::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 passyds = 10;
  if (has_passyds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->passyds(), target);
  }

  // optional int32 passtd = 20;
  if (has_passtd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->passtd(), target);
  }

  // optional int32 rushyds = 30;
  if (has_rushyds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->rushyds(), target);
  }

  // optional int32 rushtd = 40;
  if (has_rushtd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(40, this->rushtd(), target);
  }

  // optional int32 recyds = 50;
  if (has_recyds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(50, this->recyds(), target);
  }

  // optional int32 rectd = 60;
  if (has_rectd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(60, this->rectd(), target);
  }

  // optional int32 rec = 70;
  if (has_rec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(70, this->rec(), target);
  }

  // optional int32 pint = 80;
  if (has_pint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(80, this->pint(), target);
  }

  // optional int32 fumble = 90;
  if (has_fumble()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(90, this->fumble(), target);
  }

  // optional int32 twopt = 100;
  if (has_twopt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(100, this->twopt(), target);
  }

  // optional int32 onept = 110;
  if (has_onept()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(110, this->onept(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Ostats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 passyds = 10;
    if (has_passyds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->passyds());
    }

    // optional int32 passtd = 20;
    if (has_passtd()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->passtd());
    }

    // optional int32 rushyds = 30;
    if (has_rushyds()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rushyds());
    }

    // optional int32 rushtd = 40;
    if (has_rushtd()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rushtd());
    }

    // optional int32 recyds = 50;
    if (has_recyds()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->recyds());
    }

    // optional int32 rectd = 60;
    if (has_rectd()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rectd());
    }

    // optional int32 rec = 70;
    if (has_rec()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rec());
    }

    // optional int32 pint = 80;
    if (has_pint()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pint());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 fumble = 90;
    if (has_fumble()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fumble());
    }

    // optional int32 twopt = 100;
    if (has_twopt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->twopt());
    }

    // optional int32 onept = 110;
    if (has_onept()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->onept());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ostats::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Ostats* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Ostats*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Ostats::MergeFrom(const Ostats& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_passyds()) {
      set_passyds(from.passyds());
    }
    if (from.has_passtd()) {
      set_passtd(from.passtd());
    }
    if (from.has_rushyds()) {
      set_rushyds(from.rushyds());
    }
    if (from.has_rushtd()) {
      set_rushtd(from.rushtd());
    }
    if (from.has_recyds()) {
      set_recyds(from.recyds());
    }
    if (from.has_rectd()) {
      set_rectd(from.rectd());
    }
    if (from.has_rec()) {
      set_rec(from.rec());
    }
    if (from.has_pint()) {
      set_pint(from.pint());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_fumble()) {
      set_fumble(from.fumble());
    }
    if (from.has_twopt()) {
      set_twopt(from.twopt());
    }
    if (from.has_onept()) {
      set_onept(from.onept());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Ostats::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ostats::CopyFrom(const Ostats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ostats::IsInitialized() const {

  return true;
}

void Ostats::Swap(Ostats* other) {
  if (other != this) {
    std::swap(passyds_, other->passyds_);
    std::swap(passtd_, other->passtd_);
    std::swap(rushyds_, other->rushyds_);
    std::swap(rushtd_, other->rushtd_);
    std::swap(recyds_, other->recyds_);
    std::swap(rectd_, other->rectd_);
    std::swap(rec_, other->rec_);
    std::swap(pint_, other->pint_);
    std::swap(fumble_, other->fumble_);
    std::swap(twopt_, other->twopt_);
    std::swap(onept_, other->onept_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Ostats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Ostats_descriptor_;
  metadata.reflection = Ostats_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Stats::kOstatsFieldNumber;
const int Stats::kDstatsFieldNumber;
const int Stats::kKstatsFieldNumber;
#endif  // !_MSC_VER

Stats::Stats()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Stats::InitAsDefaultInstance() {
  ostats_ = const_cast< ::fantasybit::Ostats*>(&::fantasybit::Ostats::default_instance());
  dstats_ = const_cast< ::fantasybit::Dstats*>(&::fantasybit::Dstats::default_instance());
  kstats_ = const_cast< ::fantasybit::Kstats*>(&::fantasybit::Kstats::default_instance());
}

Stats::Stats(const Stats& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Stats::SharedCtor() {
  _cached_size_ = 0;
  ostats_ = NULL;
  dstats_ = NULL;
  kstats_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Stats::~Stats() {
  SharedDtor();
}

void Stats::SharedDtor() {
  if (this != default_instance_) {
    delete ostats_;
    delete dstats_;
    delete kstats_;
  }
}

void Stats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Stats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Stats_descriptor_;
}

const Stats& Stats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StaticData_2eproto();
  return *default_instance_;
}

Stats* Stats::default_instance_ = NULL;

Stats* Stats::New() const {
  return new Stats;
}

void Stats::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ostats()) {
      if (ostats_ != NULL) ostats_->::fantasybit::Ostats::Clear();
    }
    if (has_dstats()) {
      if (dstats_ != NULL) dstats_->::fantasybit::Dstats::Clear();
    }
    if (has_kstats()) {
      if (kstats_ != NULL) kstats_->::fantasybit::Kstats::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Stats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fantasybit.Ostats ostats = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ostats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_dstats;
        break;
      }

      // optional .fantasybit.Dstats dstats = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dstats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dstats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_kstats;
        break;
      }

      // optional .fantasybit.Kstats kstats = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_kstats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kstats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Stats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fantasybit.Ostats ostats = 10;
  if (has_ostats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->ostats(), output);
  }

  // optional .fantasybit.Dstats dstats = 20;
  if (has_dstats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->dstats(), output);
  }

  // optional .fantasybit.Kstats kstats = 30;
  if (has_kstats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->kstats(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Stats::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fantasybit.Ostats ostats = 10;
  if (has_ostats()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->ostats(), target);
  }

  // optional .fantasybit.Dstats dstats = 20;
  if (has_dstats()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->dstats(), target);
  }

  // optional .fantasybit.Kstats kstats = 30;
  if (has_kstats()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->kstats(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Stats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fantasybit.Ostats ostats = 10;
    if (has_ostats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ostats());
    }

    // optional .fantasybit.Dstats dstats = 20;
    if (has_dstats()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dstats());
    }

    // optional .fantasybit.Kstats kstats = 30;
    if (has_kstats()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->kstats());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Stats::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Stats* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Stats*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Stats::MergeFrom(const Stats& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ostats()) {
      mutable_ostats()->::fantasybit::Ostats::MergeFrom(from.ostats());
    }
    if (from.has_dstats()) {
      mutable_dstats()->::fantasybit::Dstats::MergeFrom(from.dstats());
    }
    if (from.has_kstats()) {
      mutable_kstats()->::fantasybit::Kstats::MergeFrom(from.kstats());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Stats::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Stats::CopyFrom(const Stats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stats::IsInitialized() const {

  return true;
}

void Stats::Swap(Stats* other) {
  if (other != this) {
    std::swap(ostats_, other->ostats_);
    std::swap(dstats_, other->dstats_);
    std::swap(kstats_, other->kstats_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Stats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Stats_descriptor_;
  metadata.reflection = Stats_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerResult::kPlayeridFieldNumber;
const int PlayerResult::kResultFieldNumber;
const int PlayerResult::kStatsFieldNumber;
const int PlayerResult::kFantaybitawardFieldNumber;
const int PlayerResult::kFantasybitpnlFieldNumber;
#endif  // !_MSC_VER

PlayerResult::PlayerResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerResult::InitAsDefaultInstance() {
  stats_ = const_cast< ::fantasybit::Stats*>(&::fantasybit::Stats::default_instance());
}

PlayerResult::PlayerResult(const PlayerResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerResult::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  result_ = 0;
  stats_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerResult::~PlayerResult() {
  SharedDtor();
}

void PlayerResult::SharedDtor() {
  if (playerid_ != &::google::protobuf::internal::kEmptyString) {
    delete playerid_;
  }
  if (this != default_instance_) {
    delete stats_;
  }
}

void PlayerResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerResult_descriptor_;
}

const PlayerResult& PlayerResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StaticData_2eproto();
  return *default_instance_;
}

PlayerResult* PlayerResult::default_instance_ = NULL;

PlayerResult* PlayerResult::New() const {
  return new PlayerResult;
}

void PlayerResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_playerid()) {
      if (playerid_ != &::google::protobuf::internal::kEmptyString) {
        playerid_->clear();
      }
    }
    result_ = 0;
    if (has_stats()) {
      if (stats_ != NULL) stats_->::fantasybit::Stats::Clear();
    }
  }
  fantaybitaward_.Clear();
  fantasybitpnl_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string playerid = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playerid().data(), this->playerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(325)) goto parse_result;
        break;
      }

      // optional float result = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(402)) goto parse_stats;
        break;
      }

      // optional .fantasybit.Stats stats = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(482)) goto parse_fantaybitaward;
        break;
      }

      // repeated .fantasybit.FantasyBitAward fantaybitaward = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fantaybitaward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fantaybitaward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(482)) goto parse_fantaybitaward;
        if (input->ExpectTag(562)) goto parse_fantasybitpnl;
        break;
      }

      // repeated .fantasybit.FantasyBitPnl fantasybitpnl = 70;
      case 70: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fantasybitpnl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fantasybitpnl()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(562)) goto parse_fantasybitpnl;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string playerid = 20;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->playerid(), output);
  }

  // optional float result = 40;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(40, this->result(), output);
  }

  // optional .fantasybit.Stats stats = 50;
  if (has_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      50, this->stats(), output);
  }

  // repeated .fantasybit.FantasyBitAward fantaybitaward = 60;
  for (int i = 0; i < this->fantaybitaward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      60, this->fantaybitaward(i), output);
  }

  // repeated .fantasybit.FantasyBitPnl fantasybitpnl = 70;
  for (int i = 0; i < this->fantasybitpnl_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      70, this->fantasybitpnl(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string playerid = 20;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->playerid(), target);
  }

  // optional float result = 40;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(40, this->result(), target);
  }

  // optional .fantasybit.Stats stats = 50;
  if (has_stats()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        50, this->stats(), target);
  }

  // repeated .fantasybit.FantasyBitAward fantaybitaward = 60;
  for (int i = 0; i < this->fantaybitaward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        60, this->fantaybitaward(i), target);
  }

  // repeated .fantasybit.FantasyBitPnl fantasybitpnl = 70;
  for (int i = 0; i < this->fantasybitpnl_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        70, this->fantasybitpnl(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string playerid = 20;
    if (has_playerid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playerid());
    }

    // optional float result = 40;
    if (has_result()) {
      total_size += 2 + 4;
    }

    // optional .fantasybit.Stats stats = 50;
    if (has_stats()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stats());
    }

  }
  // repeated .fantasybit.FantasyBitAward fantaybitaward = 60;
  total_size += 2 * this->fantaybitaward_size();
  for (int i = 0; i < this->fantaybitaward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fantaybitaward(i));
  }

  // repeated .fantasybit.FantasyBitPnl fantasybitpnl = 70;
  total_size += 2 * this->fantasybitpnl_size();
  for (int i = 0; i < this->fantasybitpnl_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fantasybitpnl(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerResult::MergeFrom(const PlayerResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  fantaybitaward_.MergeFrom(from.fantaybitaward_);
  fantasybitpnl_.MergeFrom(from.fantasybitpnl_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_stats()) {
      mutable_stats()->::fantasybit::Stats::MergeFrom(from.stats());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerResult::CopyFrom(const PlayerResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerResult::IsInitialized() const {

  return true;
}

void PlayerResult::Swap(PlayerResult* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(result_, other->result_);
    std::swap(stats_, other->stats_);
    fantaybitaward_.Swap(&other->fantaybitaward_);
    fantasybitpnl_.Swap(&other->fantasybitpnl_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerResult_descriptor_;
  metadata.reflection = PlayerResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameResult::kGameidFieldNumber;
const int GameResult::kHomeResultFieldNumber;
const int GameResult::kAwayResultFieldNumber;
const int GameResult::kKickofftimeFieldNumber;
#endif  // !_MSC_VER

GameResult::GameResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameResult::InitAsDefaultInstance() {
}

GameResult::GameResult(const GameResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameResult::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  kickofftime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameResult::~GameResult() {
  SharedDtor();
}

void GameResult::SharedDtor() {
  if (gameid_ != &::google::protobuf::internal::kEmptyString) {
    delete gameid_;
  }
  if (this != default_instance_) {
  }
}

void GameResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameResult_descriptor_;
}

const GameResult& GameResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StaticData_2eproto();
  return *default_instance_;
}

GameResult* GameResult::default_instance_ = NULL;

GameResult* GameResult::New() const {
  return new GameResult;
}

void GameResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_gameid()) {
      if (gameid_ != &::google::protobuf::internal::kEmptyString) {
        gameid_->clear();
      }
    }
    kickofftime_ = 0u;
  }
  home_result_.Clear();
  away_result_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string gameid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gameid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gameid().data(), this->gameid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_home_result;
        break;
      }

      // repeated .fantasybit.PlayerResult home_result = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_home_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_home_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_home_result;
        if (input->ExpectTag(162)) goto parse_away_result;
        break;
      }

      // repeated .fantasybit.PlayerResult away_result = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_away_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_away_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_away_result;
        if (input->ExpectTag(240)) goto parse_kickofftime;
        break;
      }

      // optional uint32 kickofftime = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kickofftime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kickofftime_)));
          set_has_kickofftime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string gameid = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gameid().data(), this->gameid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->gameid(), output);
  }

  // repeated .fantasybit.PlayerResult home_result = 10;
  for (int i = 0; i < this->home_result_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->home_result(i), output);
  }

  // repeated .fantasybit.PlayerResult away_result = 20;
  for (int i = 0; i < this->away_result_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->away_result(i), output);
  }

  // optional uint32 kickofftime = 30;
  if (has_kickofftime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->kickofftime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string gameid = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gameid().data(), this->gameid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gameid(), target);
  }

  // repeated .fantasybit.PlayerResult home_result = 10;
  for (int i = 0; i < this->home_result_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->home_result(i), target);
  }

  // repeated .fantasybit.PlayerResult away_result = 20;
  for (int i = 0; i < this->away_result_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->away_result(i), target);
  }

  // optional uint32 kickofftime = 30;
  if (has_kickofftime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->kickofftime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string gameid = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gameid());
    }

    // optional uint32 kickofftime = 30;
    if (has_kickofftime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kickofftime());
    }

  }
  // repeated .fantasybit.PlayerResult home_result = 10;
  total_size += 1 * this->home_result_size();
  for (int i = 0; i < this->home_result_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->home_result(i));
  }

  // repeated .fantasybit.PlayerResult away_result = 20;
  total_size += 2 * this->away_result_size();
  for (int i = 0; i < this->away_result_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->away_result(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameResult::MergeFrom(const GameResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  home_result_.MergeFrom(from.home_result_);
  away_result_.MergeFrom(from.away_result_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_kickofftime()) {
      set_kickofftime(from.kickofftime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameResult::CopyFrom(const GameResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameResult::IsInitialized() const {

  return true;
}

void GameResult::Swap(GameResult* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    home_result_.Swap(&other->home_result_);
    away_result_.Swap(&other->away_result_);
    std::swap(kickofftime_, other->kickofftime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameResult_descriptor_;
  metadata.reflection = GameResult_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace fantasybit

// @@protoc_insertion_point(global_scope)
