// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ApiData.proto

#ifndef PROTOBUF_ApiData_2eproto__INCLUDED
#define PROTOBUF_ApiData_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace fantasybit {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ApiData_2eproto();
void protobuf_AssignDesc_ApiData_2eproto();
void protobuf_ShutdownFile_ApiData_2eproto();

class FantasyNameHash;
class Distribution;
class ProjKstats;
class ProjDstats;
class ProjOstats;
class ProjStats;

// ===================================================================

class FantasyNameHash : public ::google::protobuf::Message {
 public:
  FantasyNameHash();
  virtual ~FantasyNameHash();

  FantasyNameHash(const FantasyNameHash& from);

  inline FantasyNameHash& operator=(const FantasyNameHash& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FantasyNameHash& default_instance();

  void Swap(FantasyNameHash* other);

  // implements Message ----------------------------------------------

  FantasyNameHash* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FantasyNameHash& from);
  void MergeFrom(const FantasyNameHash& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 10;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 10;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint64 hash = 30;
  inline bool has_hash() const;
  inline void clear_hash();
  static const int kHashFieldNumber = 30;
  inline ::google::protobuf::uint64 hash() const;
  inline void set_hash(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:fantasybit.FantasyNameHash)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_hash();
  inline void clear_has_hash();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint64 hash_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ApiData_2eproto();
  friend void protobuf_AssignDesc_ApiData_2eproto();
  friend void protobuf_ShutdownFile_ApiData_2eproto();

  void InitAsDefaultInstance();
  static FantasyNameHash* default_instance_;
};
// -------------------------------------------------------------------

class Distribution : public ::google::protobuf::Message {
 public:
  Distribution();
  virtual ~Distribution();

  Distribution(const Distribution& from);

  inline Distribution& operator=(const Distribution& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Distribution& default_instance();

  void Swap(Distribution* other);

  // implements Message ----------------------------------------------

  Distribution* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Distribution& from);
  void MergeFrom(const Distribution& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string gameid = 2;
  inline bool has_gameid() const;
  inline void clear_gameid();
  static const int kGameidFieldNumber = 2;
  inline const ::std::string& gameid() const;
  inline void set_gameid(const ::std::string& value);
  inline void set_gameid(const char* value);
  inline void set_gameid(const char* value, size_t size);
  inline ::std::string* mutable_gameid();
  inline ::std::string* release_gameid();
  inline void set_allocated_gameid(::std::string* gameid);

  // optional string teamid = 4;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamidFieldNumber = 4;
  inline const ::std::string& teamid() const;
  inline void set_teamid(const ::std::string& value);
  inline void set_teamid(const char* value);
  inline void set_teamid(const char* value, size_t size);
  inline ::std::string* mutable_teamid();
  inline ::std::string* release_teamid();
  inline void set_allocated_teamid(::std::string* teamid);

  // optional int32 season = 5;
  inline bool has_season() const;
  inline void clear_season();
  static const int kSeasonFieldNumber = 5;
  inline ::google::protobuf::int32 season() const;
  inline void set_season(::google::protobuf::int32 value);

  // optional int32 week = 6;
  inline bool has_week() const;
  inline void clear_week();
  static const int kWeekFieldNumber = 6;
  inline ::google::protobuf::int32 week() const;
  inline void set_week(::google::protobuf::int32 value);

  // optional uint64 fantasy_nameid = 1;
  inline bool has_fantasy_nameid() const;
  inline void clear_fantasy_nameid();
  static const int kFantasyNameidFieldNumber = 1;
  inline ::google::protobuf::uint64 fantasy_nameid() const;
  inline void set_fantasy_nameid(::google::protobuf::uint64 value);

  // optional string playerid = 3;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 3;
  inline const ::std::string& playerid() const;
  inline void set_playerid(const ::std::string& value);
  inline void set_playerid(const char* value);
  inline void set_playerid(const char* value, size_t size);
  inline ::std::string* mutable_playerid();
  inline ::std::string* release_playerid();
  inline void set_allocated_playerid(::std::string* playerid);

  // optional int32 proj = 7;
  inline bool has_proj() const;
  inline void clear_proj();
  static const int kProjFieldNumber = 7;
  inline ::google::protobuf::int32 proj() const;
  inline void set_proj(::google::protobuf::int32 value);

  // optional float award = 8;
  inline bool has_award() const;
  inline void clear_award();
  static const int kAwardFieldNumber = 8;
  inline float award() const;
  inline void set_award(float value);

  // optional float result = 9;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 9;
  inline float result() const;
  inline void set_result(float value);

  // @@protoc_insertion_point(class_scope:fantasybit.Distribution)
 private:
  inline void set_has_gameid();
  inline void clear_has_gameid();
  inline void set_has_teamid();
  inline void clear_has_teamid();
  inline void set_has_season();
  inline void clear_has_season();
  inline void set_has_week();
  inline void clear_has_week();
  inline void set_has_fantasy_nameid();
  inline void clear_has_fantasy_nameid();
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_proj();
  inline void clear_has_proj();
  inline void set_has_award();
  inline void clear_has_award();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* gameid_;
  ::std::string* teamid_;
  ::google::protobuf::int32 season_;
  ::google::protobuf::int32 week_;
  ::google::protobuf::uint64 fantasy_nameid_;
  ::std::string* playerid_;
  ::google::protobuf::int32 proj_;
  float award_;
  float result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_ApiData_2eproto();
  friend void protobuf_AssignDesc_ApiData_2eproto();
  friend void protobuf_ShutdownFile_ApiData_2eproto();

  void InitAsDefaultInstance();
  static Distribution* default_instance_;
};
// -------------------------------------------------------------------

class ProjKstats : public ::google::protobuf::Message {
 public:
  ProjKstats();
  virtual ~ProjKstats();

  ProjKstats(const ProjKstats& from);

  inline ProjKstats& operator=(const ProjKstats& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProjKstats& default_instance();

  void Swap(ProjKstats* other);

  // implements Message ----------------------------------------------

  ProjKstats* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProjKstats& from);
  void MergeFrom(const ProjKstats& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float pa = 10;
  inline bool has_pa() const;
  inline void clear_pa();
  static const int kPaFieldNumber = 10;
  inline float pa() const;
  inline void set_pa(float value);

  // optional float fg30 = 20;
  inline bool has_fg30() const;
  inline void clear_fg30();
  static const int kFg30FieldNumber = 20;
  inline float fg30() const;
  inline void set_fg30(float value);

  // optional float fg40 = 30;
  inline bool has_fg40() const;
  inline void clear_fg40();
  static const int kFg40FieldNumber = 30;
  inline float fg40() const;
  inline void set_fg40(float value);

  // optional float fg50 = 40;
  inline bool has_fg50() const;
  inline void clear_fg50();
  static const int kFg50FieldNumber = 40;
  inline float fg50() const;
  inline void set_fg50(float value);

  // optional float fg60 = 50;
  inline bool has_fg60() const;
  inline void clear_fg60();
  static const int kFg60FieldNumber = 50;
  inline float fg60() const;
  inline void set_fg60(float value);

  // @@protoc_insertion_point(class_scope:fantasybit.ProjKstats)
 private:
  inline void set_has_pa();
  inline void clear_has_pa();
  inline void set_has_fg30();
  inline void clear_has_fg30();
  inline void set_has_fg40();
  inline void clear_has_fg40();
  inline void set_has_fg50();
  inline void clear_has_fg50();
  inline void set_has_fg60();
  inline void clear_has_fg60();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  float pa_;
  float fg30_;
  float fg40_;
  float fg50_;
  float fg60_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_ApiData_2eproto();
  friend void protobuf_AssignDesc_ApiData_2eproto();
  friend void protobuf_ShutdownFile_ApiData_2eproto();

  void InitAsDefaultInstance();
  static ProjKstats* default_instance_;
};
// -------------------------------------------------------------------

class ProjDstats : public ::google::protobuf::Message {
 public:
  ProjDstats();
  virtual ~ProjDstats();

  ProjDstats(const ProjDstats& from);

  inline ProjDstats& operator=(const ProjDstats& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProjDstats& default_instance();

  void Swap(ProjDstats* other);

  // implements Message ----------------------------------------------

  ProjDstats* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProjDstats& from);
  void MergeFrom(const ProjDstats& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float twopt = 100;
  inline bool has_twopt() const;
  inline void clear_twopt();
  static const int kTwoptFieldNumber = 100;
  inline float twopt() const;
  inline void set_twopt(float value);

  // optional float onept = 110;
  inline bool has_onept() const;
  inline void clear_onept();
  static const int kOneptFieldNumber = 110;
  inline float onept() const;
  inline void set_onept(float value);

  // optional float deftd = 120;
  inline bool has_deftd() const;
  inline void clear_deftd();
  static const int kDeftdFieldNumber = 120;
  inline float deftd() const;
  inline void set_deftd(float value);

  // optional float sfty = 130;
  inline bool has_sfty() const;
  inline void clear_sfty();
  static const int kSftyFieldNumber = 130;
  inline float sfty() const;
  inline void set_sfty(float value);

  // optional float turnovers = 140;
  inline bool has_turnovers() const;
  inline void clear_turnovers();
  static const int kTurnoversFieldNumber = 140;
  inline float turnovers() const;
  inline void set_turnovers(float value);

  // optional float sacks = 150;
  inline bool has_sacks() const;
  inline void clear_sacks();
  static const int kSacksFieldNumber = 150;
  inline float sacks() const;
  inline void set_sacks(float value);

  // optional float ptsa = 160;
  inline bool has_ptsa() const;
  inline void clear_ptsa();
  static const int kPtsaFieldNumber = 160;
  inline float ptsa() const;
  inline void set_ptsa(float value);

  // @@protoc_insertion_point(class_scope:fantasybit.ProjDstats)
 private:
  inline void set_has_twopt();
  inline void clear_has_twopt();
  inline void set_has_onept();
  inline void clear_has_onept();
  inline void set_has_deftd();
  inline void clear_has_deftd();
  inline void set_has_sfty();
  inline void clear_has_sfty();
  inline void set_has_turnovers();
  inline void clear_has_turnovers();
  inline void set_has_sacks();
  inline void clear_has_sacks();
  inline void set_has_ptsa();
  inline void clear_has_ptsa();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  float twopt_;
  float onept_;
  float deftd_;
  float sfty_;
  float turnovers_;
  float sacks_;
  float ptsa_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_ApiData_2eproto();
  friend void protobuf_AssignDesc_ApiData_2eproto();
  friend void protobuf_ShutdownFile_ApiData_2eproto();

  void InitAsDefaultInstance();
  static ProjDstats* default_instance_;
};
// -------------------------------------------------------------------

class ProjOstats : public ::google::protobuf::Message {
 public:
  ProjOstats();
  virtual ~ProjOstats();

  ProjOstats(const ProjOstats& from);

  inline ProjOstats& operator=(const ProjOstats& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProjOstats& default_instance();

  void Swap(ProjOstats* other);

  // implements Message ----------------------------------------------

  ProjOstats* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProjOstats& from);
  void MergeFrom(const ProjOstats& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float passyds = 10;
  inline bool has_passyds() const;
  inline void clear_passyds();
  static const int kPassydsFieldNumber = 10;
  inline float passyds() const;
  inline void set_passyds(float value);

  // optional float passtd = 20;
  inline bool has_passtd() const;
  inline void clear_passtd();
  static const int kPasstdFieldNumber = 20;
  inline float passtd() const;
  inline void set_passtd(float value);

  // optional float rushyds = 30;
  inline bool has_rushyds() const;
  inline void clear_rushyds();
  static const int kRushydsFieldNumber = 30;
  inline float rushyds() const;
  inline void set_rushyds(float value);

  // optional float rushtd = 40;
  inline bool has_rushtd() const;
  inline void clear_rushtd();
  static const int kRushtdFieldNumber = 40;
  inline float rushtd() const;
  inline void set_rushtd(float value);

  // optional float recyds = 50;
  inline bool has_recyds() const;
  inline void clear_recyds();
  static const int kRecydsFieldNumber = 50;
  inline float recyds() const;
  inline void set_recyds(float value);

  // optional float rectd = 60;
  inline bool has_rectd() const;
  inline void clear_rectd();
  static const int kRectdFieldNumber = 60;
  inline float rectd() const;
  inline void set_rectd(float value);

  // optional float rec = 70;
  inline bool has_rec() const;
  inline void clear_rec();
  static const int kRecFieldNumber = 70;
  inline float rec() const;
  inline void set_rec(float value);

  // optional float pint = 80;
  inline bool has_pint() const;
  inline void clear_pint();
  static const int kPintFieldNumber = 80;
  inline float pint() const;
  inline void set_pint(float value);

  // optional float fumble = 90;
  inline bool has_fumble() const;
  inline void clear_fumble();
  static const int kFumbleFieldNumber = 90;
  inline float fumble() const;
  inline void set_fumble(float value);

  // optional float twopt = 100;
  inline bool has_twopt() const;
  inline void clear_twopt();
  static const int kTwoptFieldNumber = 100;
  inline float twopt() const;
  inline void set_twopt(float value);

  // optional float onept = 110;
  inline bool has_onept() const;
  inline void clear_onept();
  static const int kOneptFieldNumber = 110;
  inline float onept() const;
  inline void set_onept(float value);

  // @@protoc_insertion_point(class_scope:fantasybit.ProjOstats)
 private:
  inline void set_has_passyds();
  inline void clear_has_passyds();
  inline void set_has_passtd();
  inline void clear_has_passtd();
  inline void set_has_rushyds();
  inline void clear_has_rushyds();
  inline void set_has_rushtd();
  inline void clear_has_rushtd();
  inline void set_has_recyds();
  inline void clear_has_recyds();
  inline void set_has_rectd();
  inline void clear_has_rectd();
  inline void set_has_rec();
  inline void clear_has_rec();
  inline void set_has_pint();
  inline void clear_has_pint();
  inline void set_has_fumble();
  inline void clear_has_fumble();
  inline void set_has_twopt();
  inline void clear_has_twopt();
  inline void set_has_onept();
  inline void clear_has_onept();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  float passyds_;
  float passtd_;
  float rushyds_;
  float rushtd_;
  float recyds_;
  float rectd_;
  float rec_;
  float pint_;
  float fumble_;
  float twopt_;
  float onept_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_ApiData_2eproto();
  friend void protobuf_AssignDesc_ApiData_2eproto();
  friend void protobuf_ShutdownFile_ApiData_2eproto();

  void InitAsDefaultInstance();
  static ProjOstats* default_instance_;
};
// -------------------------------------------------------------------

class ProjStats : public ::google::protobuf::Message {
 public:
  ProjStats();
  virtual ~ProjStats();

  ProjStats(const ProjStats& from);

  inline ProjStats& operator=(const ProjStats& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProjStats& default_instance();

  void Swap(ProjStats* other);

  // implements Message ----------------------------------------------

  ProjStats* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProjStats& from);
  void MergeFrom(const ProjStats& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .fantasybit.ProjOstats ostats = 10;
  inline bool has_ostats() const;
  inline void clear_ostats();
  static const int kOstatsFieldNumber = 10;
  inline const ::fantasybit::ProjOstats& ostats() const;
  inline ::fantasybit::ProjOstats* mutable_ostats();
  inline ::fantasybit::ProjOstats* release_ostats();
  inline void set_allocated_ostats(::fantasybit::ProjOstats* ostats);

  // optional .fantasybit.ProjDstats dstats = 20;
  inline bool has_dstats() const;
  inline void clear_dstats();
  static const int kDstatsFieldNumber = 20;
  inline const ::fantasybit::ProjDstats& dstats() const;
  inline ::fantasybit::ProjDstats* mutable_dstats();
  inline ::fantasybit::ProjDstats* release_dstats();
  inline void set_allocated_dstats(::fantasybit::ProjDstats* dstats);

  // optional .fantasybit.ProjKstats kstats = 30;
  inline bool has_kstats() const;
  inline void clear_kstats();
  static const int kKstatsFieldNumber = 30;
  inline const ::fantasybit::ProjKstats& kstats() const;
  inline ::fantasybit::ProjKstats* mutable_kstats();
  inline ::fantasybit::ProjKstats* release_kstats();
  inline void set_allocated_kstats(::fantasybit::ProjKstats* kstats);

  // @@protoc_insertion_point(class_scope:fantasybit.ProjStats)
 private:
  inline void set_has_ostats();
  inline void clear_has_ostats();
  inline void set_has_dstats();
  inline void clear_has_dstats();
  inline void set_has_kstats();
  inline void clear_has_kstats();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::fantasybit::ProjOstats* ostats_;
  ::fantasybit::ProjDstats* dstats_;
  ::fantasybit::ProjKstats* kstats_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ApiData_2eproto();
  friend void protobuf_AssignDesc_ApiData_2eproto();
  friend void protobuf_ShutdownFile_ApiData_2eproto();

  void InitAsDefaultInstance();
  static ProjStats* default_instance_;
};
// ===================================================================


// ===================================================================

// FantasyNameHash

// optional string name = 10;
inline bool FantasyNameHash::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FantasyNameHash::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FantasyNameHash::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FantasyNameHash::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& FantasyNameHash::name() const {
  return *name_;
}
inline void FantasyNameHash::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FantasyNameHash::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FantasyNameHash::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FantasyNameHash::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* FantasyNameHash::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FantasyNameHash::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 hash = 30;
inline bool FantasyNameHash::has_hash() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FantasyNameHash::set_has_hash() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FantasyNameHash::clear_has_hash() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FantasyNameHash::clear_hash() {
  hash_ = GOOGLE_ULONGLONG(0);
  clear_has_hash();
}
inline ::google::protobuf::uint64 FantasyNameHash::hash() const {
  return hash_;
}
inline void FantasyNameHash::set_hash(::google::protobuf::uint64 value) {
  set_has_hash();
  hash_ = value;
}

// -------------------------------------------------------------------

// Distribution

// optional string gameid = 2;
inline bool Distribution::has_gameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Distribution::set_has_gameid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Distribution::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Distribution::clear_gameid() {
  if (gameid_ != &::google::protobuf::internal::kEmptyString) {
    gameid_->clear();
  }
  clear_has_gameid();
}
inline const ::std::string& Distribution::gameid() const {
  return *gameid_;
}
inline void Distribution::set_gameid(const ::std::string& value) {
  set_has_gameid();
  if (gameid_ == &::google::protobuf::internal::kEmptyString) {
    gameid_ = new ::std::string;
  }
  gameid_->assign(value);
}
inline void Distribution::set_gameid(const char* value) {
  set_has_gameid();
  if (gameid_ == &::google::protobuf::internal::kEmptyString) {
    gameid_ = new ::std::string;
  }
  gameid_->assign(value);
}
inline void Distribution::set_gameid(const char* value, size_t size) {
  set_has_gameid();
  if (gameid_ == &::google::protobuf::internal::kEmptyString) {
    gameid_ = new ::std::string;
  }
  gameid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Distribution::mutable_gameid() {
  set_has_gameid();
  if (gameid_ == &::google::protobuf::internal::kEmptyString) {
    gameid_ = new ::std::string;
  }
  return gameid_;
}
inline ::std::string* Distribution::release_gameid() {
  clear_has_gameid();
  if (gameid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = gameid_;
    gameid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Distribution::set_allocated_gameid(::std::string* gameid) {
  if (gameid_ != &::google::protobuf::internal::kEmptyString) {
    delete gameid_;
  }
  if (gameid) {
    set_has_gameid();
    gameid_ = gameid;
  } else {
    clear_has_gameid();
    gameid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string teamid = 4;
inline bool Distribution::has_teamid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Distribution::set_has_teamid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Distribution::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Distribution::clear_teamid() {
  if (teamid_ != &::google::protobuf::internal::kEmptyString) {
    teamid_->clear();
  }
  clear_has_teamid();
}
inline const ::std::string& Distribution::teamid() const {
  return *teamid_;
}
inline void Distribution::set_teamid(const ::std::string& value) {
  set_has_teamid();
  if (teamid_ == &::google::protobuf::internal::kEmptyString) {
    teamid_ = new ::std::string;
  }
  teamid_->assign(value);
}
inline void Distribution::set_teamid(const char* value) {
  set_has_teamid();
  if (teamid_ == &::google::protobuf::internal::kEmptyString) {
    teamid_ = new ::std::string;
  }
  teamid_->assign(value);
}
inline void Distribution::set_teamid(const char* value, size_t size) {
  set_has_teamid();
  if (teamid_ == &::google::protobuf::internal::kEmptyString) {
    teamid_ = new ::std::string;
  }
  teamid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Distribution::mutable_teamid() {
  set_has_teamid();
  if (teamid_ == &::google::protobuf::internal::kEmptyString) {
    teamid_ = new ::std::string;
  }
  return teamid_;
}
inline ::std::string* Distribution::release_teamid() {
  clear_has_teamid();
  if (teamid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = teamid_;
    teamid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Distribution::set_allocated_teamid(::std::string* teamid) {
  if (teamid_ != &::google::protobuf::internal::kEmptyString) {
    delete teamid_;
  }
  if (teamid) {
    set_has_teamid();
    teamid_ = teamid;
  } else {
    clear_has_teamid();
    teamid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 season = 5;
inline bool Distribution::has_season() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Distribution::set_has_season() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Distribution::clear_has_season() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Distribution::clear_season() {
  season_ = 0;
  clear_has_season();
}
inline ::google::protobuf::int32 Distribution::season() const {
  return season_;
}
inline void Distribution::set_season(::google::protobuf::int32 value) {
  set_has_season();
  season_ = value;
}

// optional int32 week = 6;
inline bool Distribution::has_week() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Distribution::set_has_week() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Distribution::clear_has_week() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Distribution::clear_week() {
  week_ = 0;
  clear_has_week();
}
inline ::google::protobuf::int32 Distribution::week() const {
  return week_;
}
inline void Distribution::set_week(::google::protobuf::int32 value) {
  set_has_week();
  week_ = value;
}

// optional uint64 fantasy_nameid = 1;
inline bool Distribution::has_fantasy_nameid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Distribution::set_has_fantasy_nameid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Distribution::clear_has_fantasy_nameid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Distribution::clear_fantasy_nameid() {
  fantasy_nameid_ = GOOGLE_ULONGLONG(0);
  clear_has_fantasy_nameid();
}
inline ::google::protobuf::uint64 Distribution::fantasy_nameid() const {
  return fantasy_nameid_;
}
inline void Distribution::set_fantasy_nameid(::google::protobuf::uint64 value) {
  set_has_fantasy_nameid();
  fantasy_nameid_ = value;
}

// optional string playerid = 3;
inline bool Distribution::has_playerid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Distribution::set_has_playerid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Distribution::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Distribution::clear_playerid() {
  if (playerid_ != &::google::protobuf::internal::kEmptyString) {
    playerid_->clear();
  }
  clear_has_playerid();
}
inline const ::std::string& Distribution::playerid() const {
  return *playerid_;
}
inline void Distribution::set_playerid(const ::std::string& value) {
  set_has_playerid();
  if (playerid_ == &::google::protobuf::internal::kEmptyString) {
    playerid_ = new ::std::string;
  }
  playerid_->assign(value);
}
inline void Distribution::set_playerid(const char* value) {
  set_has_playerid();
  if (playerid_ == &::google::protobuf::internal::kEmptyString) {
    playerid_ = new ::std::string;
  }
  playerid_->assign(value);
}
inline void Distribution::set_playerid(const char* value, size_t size) {
  set_has_playerid();
  if (playerid_ == &::google::protobuf::internal::kEmptyString) {
    playerid_ = new ::std::string;
  }
  playerid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Distribution::mutable_playerid() {
  set_has_playerid();
  if (playerid_ == &::google::protobuf::internal::kEmptyString) {
    playerid_ = new ::std::string;
  }
  return playerid_;
}
inline ::std::string* Distribution::release_playerid() {
  clear_has_playerid();
  if (playerid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = playerid_;
    playerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Distribution::set_allocated_playerid(::std::string* playerid) {
  if (playerid_ != &::google::protobuf::internal::kEmptyString) {
    delete playerid_;
  }
  if (playerid) {
    set_has_playerid();
    playerid_ = playerid;
  } else {
    clear_has_playerid();
    playerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 proj = 7;
inline bool Distribution::has_proj() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Distribution::set_has_proj() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Distribution::clear_has_proj() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Distribution::clear_proj() {
  proj_ = 0;
  clear_has_proj();
}
inline ::google::protobuf::int32 Distribution::proj() const {
  return proj_;
}
inline void Distribution::set_proj(::google::protobuf::int32 value) {
  set_has_proj();
  proj_ = value;
}

// optional float award = 8;
inline bool Distribution::has_award() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Distribution::set_has_award() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Distribution::clear_has_award() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Distribution::clear_award() {
  award_ = 0;
  clear_has_award();
}
inline float Distribution::award() const {
  return award_;
}
inline void Distribution::set_award(float value) {
  set_has_award();
  award_ = value;
}

// optional float result = 9;
inline bool Distribution::has_result() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Distribution::set_has_result() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Distribution::clear_has_result() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Distribution::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline float Distribution::result() const {
  return result_;
}
inline void Distribution::set_result(float value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// ProjKstats

// optional float pa = 10;
inline bool ProjKstats::has_pa() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProjKstats::set_has_pa() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProjKstats::clear_has_pa() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProjKstats::clear_pa() {
  pa_ = 0;
  clear_has_pa();
}
inline float ProjKstats::pa() const {
  return pa_;
}
inline void ProjKstats::set_pa(float value) {
  set_has_pa();
  pa_ = value;
}

// optional float fg30 = 20;
inline bool ProjKstats::has_fg30() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProjKstats::set_has_fg30() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProjKstats::clear_has_fg30() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProjKstats::clear_fg30() {
  fg30_ = 0;
  clear_has_fg30();
}
inline float ProjKstats::fg30() const {
  return fg30_;
}
inline void ProjKstats::set_fg30(float value) {
  set_has_fg30();
  fg30_ = value;
}

// optional float fg40 = 30;
inline bool ProjKstats::has_fg40() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProjKstats::set_has_fg40() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProjKstats::clear_has_fg40() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProjKstats::clear_fg40() {
  fg40_ = 0;
  clear_has_fg40();
}
inline float ProjKstats::fg40() const {
  return fg40_;
}
inline void ProjKstats::set_fg40(float value) {
  set_has_fg40();
  fg40_ = value;
}

// optional float fg50 = 40;
inline bool ProjKstats::has_fg50() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProjKstats::set_has_fg50() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProjKstats::clear_has_fg50() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProjKstats::clear_fg50() {
  fg50_ = 0;
  clear_has_fg50();
}
inline float ProjKstats::fg50() const {
  return fg50_;
}
inline void ProjKstats::set_fg50(float value) {
  set_has_fg50();
  fg50_ = value;
}

// optional float fg60 = 50;
inline bool ProjKstats::has_fg60() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProjKstats::set_has_fg60() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProjKstats::clear_has_fg60() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProjKstats::clear_fg60() {
  fg60_ = 0;
  clear_has_fg60();
}
inline float ProjKstats::fg60() const {
  return fg60_;
}
inline void ProjKstats::set_fg60(float value) {
  set_has_fg60();
  fg60_ = value;
}

// -------------------------------------------------------------------

// ProjDstats

// optional float twopt = 100;
inline bool ProjDstats::has_twopt() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProjDstats::set_has_twopt() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProjDstats::clear_has_twopt() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProjDstats::clear_twopt() {
  twopt_ = 0;
  clear_has_twopt();
}
inline float ProjDstats::twopt() const {
  return twopt_;
}
inline void ProjDstats::set_twopt(float value) {
  set_has_twopt();
  twopt_ = value;
}

// optional float onept = 110;
inline bool ProjDstats::has_onept() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProjDstats::set_has_onept() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProjDstats::clear_has_onept() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProjDstats::clear_onept() {
  onept_ = 0;
  clear_has_onept();
}
inline float ProjDstats::onept() const {
  return onept_;
}
inline void ProjDstats::set_onept(float value) {
  set_has_onept();
  onept_ = value;
}

// optional float deftd = 120;
inline bool ProjDstats::has_deftd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProjDstats::set_has_deftd() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProjDstats::clear_has_deftd() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProjDstats::clear_deftd() {
  deftd_ = 0;
  clear_has_deftd();
}
inline float ProjDstats::deftd() const {
  return deftd_;
}
inline void ProjDstats::set_deftd(float value) {
  set_has_deftd();
  deftd_ = value;
}

// optional float sfty = 130;
inline bool ProjDstats::has_sfty() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProjDstats::set_has_sfty() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProjDstats::clear_has_sfty() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProjDstats::clear_sfty() {
  sfty_ = 0;
  clear_has_sfty();
}
inline float ProjDstats::sfty() const {
  return sfty_;
}
inline void ProjDstats::set_sfty(float value) {
  set_has_sfty();
  sfty_ = value;
}

// optional float turnovers = 140;
inline bool ProjDstats::has_turnovers() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProjDstats::set_has_turnovers() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProjDstats::clear_has_turnovers() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProjDstats::clear_turnovers() {
  turnovers_ = 0;
  clear_has_turnovers();
}
inline float ProjDstats::turnovers() const {
  return turnovers_;
}
inline void ProjDstats::set_turnovers(float value) {
  set_has_turnovers();
  turnovers_ = value;
}

// optional float sacks = 150;
inline bool ProjDstats::has_sacks() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProjDstats::set_has_sacks() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProjDstats::clear_has_sacks() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProjDstats::clear_sacks() {
  sacks_ = 0;
  clear_has_sacks();
}
inline float ProjDstats::sacks() const {
  return sacks_;
}
inline void ProjDstats::set_sacks(float value) {
  set_has_sacks();
  sacks_ = value;
}

// optional float ptsa = 160;
inline bool ProjDstats::has_ptsa() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ProjDstats::set_has_ptsa() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ProjDstats::clear_has_ptsa() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ProjDstats::clear_ptsa() {
  ptsa_ = 0;
  clear_has_ptsa();
}
inline float ProjDstats::ptsa() const {
  return ptsa_;
}
inline void ProjDstats::set_ptsa(float value) {
  set_has_ptsa();
  ptsa_ = value;
}

// -------------------------------------------------------------------

// ProjOstats

// optional float passyds = 10;
inline bool ProjOstats::has_passyds() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProjOstats::set_has_passyds() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProjOstats::clear_has_passyds() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProjOstats::clear_passyds() {
  passyds_ = 0;
  clear_has_passyds();
}
inline float ProjOstats::passyds() const {
  return passyds_;
}
inline void ProjOstats::set_passyds(float value) {
  set_has_passyds();
  passyds_ = value;
}

// optional float passtd = 20;
inline bool ProjOstats::has_passtd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProjOstats::set_has_passtd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProjOstats::clear_has_passtd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProjOstats::clear_passtd() {
  passtd_ = 0;
  clear_has_passtd();
}
inline float ProjOstats::passtd() const {
  return passtd_;
}
inline void ProjOstats::set_passtd(float value) {
  set_has_passtd();
  passtd_ = value;
}

// optional float rushyds = 30;
inline bool ProjOstats::has_rushyds() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProjOstats::set_has_rushyds() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProjOstats::clear_has_rushyds() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProjOstats::clear_rushyds() {
  rushyds_ = 0;
  clear_has_rushyds();
}
inline float ProjOstats::rushyds() const {
  return rushyds_;
}
inline void ProjOstats::set_rushyds(float value) {
  set_has_rushyds();
  rushyds_ = value;
}

// optional float rushtd = 40;
inline bool ProjOstats::has_rushtd() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProjOstats::set_has_rushtd() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProjOstats::clear_has_rushtd() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProjOstats::clear_rushtd() {
  rushtd_ = 0;
  clear_has_rushtd();
}
inline float ProjOstats::rushtd() const {
  return rushtd_;
}
inline void ProjOstats::set_rushtd(float value) {
  set_has_rushtd();
  rushtd_ = value;
}

// optional float recyds = 50;
inline bool ProjOstats::has_recyds() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProjOstats::set_has_recyds() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProjOstats::clear_has_recyds() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProjOstats::clear_recyds() {
  recyds_ = 0;
  clear_has_recyds();
}
inline float ProjOstats::recyds() const {
  return recyds_;
}
inline void ProjOstats::set_recyds(float value) {
  set_has_recyds();
  recyds_ = value;
}

// optional float rectd = 60;
inline bool ProjOstats::has_rectd() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProjOstats::set_has_rectd() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProjOstats::clear_has_rectd() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProjOstats::clear_rectd() {
  rectd_ = 0;
  clear_has_rectd();
}
inline float ProjOstats::rectd() const {
  return rectd_;
}
inline void ProjOstats::set_rectd(float value) {
  set_has_rectd();
  rectd_ = value;
}

// optional float rec = 70;
inline bool ProjOstats::has_rec() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ProjOstats::set_has_rec() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ProjOstats::clear_has_rec() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ProjOstats::clear_rec() {
  rec_ = 0;
  clear_has_rec();
}
inline float ProjOstats::rec() const {
  return rec_;
}
inline void ProjOstats::set_rec(float value) {
  set_has_rec();
  rec_ = value;
}

// optional float pint = 80;
inline bool ProjOstats::has_pint() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ProjOstats::set_has_pint() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ProjOstats::clear_has_pint() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ProjOstats::clear_pint() {
  pint_ = 0;
  clear_has_pint();
}
inline float ProjOstats::pint() const {
  return pint_;
}
inline void ProjOstats::set_pint(float value) {
  set_has_pint();
  pint_ = value;
}

// optional float fumble = 90;
inline bool ProjOstats::has_fumble() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ProjOstats::set_has_fumble() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ProjOstats::clear_has_fumble() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ProjOstats::clear_fumble() {
  fumble_ = 0;
  clear_has_fumble();
}
inline float ProjOstats::fumble() const {
  return fumble_;
}
inline void ProjOstats::set_fumble(float value) {
  set_has_fumble();
  fumble_ = value;
}

// optional float twopt = 100;
inline bool ProjOstats::has_twopt() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ProjOstats::set_has_twopt() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ProjOstats::clear_has_twopt() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ProjOstats::clear_twopt() {
  twopt_ = 0;
  clear_has_twopt();
}
inline float ProjOstats::twopt() const {
  return twopt_;
}
inline void ProjOstats::set_twopt(float value) {
  set_has_twopt();
  twopt_ = value;
}

// optional float onept = 110;
inline bool ProjOstats::has_onept() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ProjOstats::set_has_onept() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ProjOstats::clear_has_onept() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ProjOstats::clear_onept() {
  onept_ = 0;
  clear_has_onept();
}
inline float ProjOstats::onept() const {
  return onept_;
}
inline void ProjOstats::set_onept(float value) {
  set_has_onept();
  onept_ = value;
}

// -------------------------------------------------------------------

// ProjStats

// optional .fantasybit.ProjOstats ostats = 10;
inline bool ProjStats::has_ostats() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProjStats::set_has_ostats() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProjStats::clear_has_ostats() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProjStats::clear_ostats() {
  if (ostats_ != NULL) ostats_->::fantasybit::ProjOstats::Clear();
  clear_has_ostats();
}
inline const ::fantasybit::ProjOstats& ProjStats::ostats() const {
  return ostats_ != NULL ? *ostats_ : *default_instance_->ostats_;
}
inline ::fantasybit::ProjOstats* ProjStats::mutable_ostats() {
  set_has_ostats();
  if (ostats_ == NULL) ostats_ = new ::fantasybit::ProjOstats;
  return ostats_;
}
inline ::fantasybit::ProjOstats* ProjStats::release_ostats() {
  clear_has_ostats();
  ::fantasybit::ProjOstats* temp = ostats_;
  ostats_ = NULL;
  return temp;
}
inline void ProjStats::set_allocated_ostats(::fantasybit::ProjOstats* ostats) {
  delete ostats_;
  ostats_ = ostats;
  if (ostats) {
    set_has_ostats();
  } else {
    clear_has_ostats();
  }
}

// optional .fantasybit.ProjDstats dstats = 20;
inline bool ProjStats::has_dstats() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProjStats::set_has_dstats() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProjStats::clear_has_dstats() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProjStats::clear_dstats() {
  if (dstats_ != NULL) dstats_->::fantasybit::ProjDstats::Clear();
  clear_has_dstats();
}
inline const ::fantasybit::ProjDstats& ProjStats::dstats() const {
  return dstats_ != NULL ? *dstats_ : *default_instance_->dstats_;
}
inline ::fantasybit::ProjDstats* ProjStats::mutable_dstats() {
  set_has_dstats();
  if (dstats_ == NULL) dstats_ = new ::fantasybit::ProjDstats;
  return dstats_;
}
inline ::fantasybit::ProjDstats* ProjStats::release_dstats() {
  clear_has_dstats();
  ::fantasybit::ProjDstats* temp = dstats_;
  dstats_ = NULL;
  return temp;
}
inline void ProjStats::set_allocated_dstats(::fantasybit::ProjDstats* dstats) {
  delete dstats_;
  dstats_ = dstats;
  if (dstats) {
    set_has_dstats();
  } else {
    clear_has_dstats();
  }
}

// optional .fantasybit.ProjKstats kstats = 30;
inline bool ProjStats::has_kstats() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProjStats::set_has_kstats() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProjStats::clear_has_kstats() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProjStats::clear_kstats() {
  if (kstats_ != NULL) kstats_->::fantasybit::ProjKstats::Clear();
  clear_has_kstats();
}
inline const ::fantasybit::ProjKstats& ProjStats::kstats() const {
  return kstats_ != NULL ? *kstats_ : *default_instance_->kstats_;
}
inline ::fantasybit::ProjKstats* ProjStats::mutable_kstats() {
  set_has_kstats();
  if (kstats_ == NULL) kstats_ = new ::fantasybit::ProjKstats;
  return kstats_;
}
inline ::fantasybit::ProjKstats* ProjStats::release_kstats() {
  clear_has_kstats();
  ::fantasybit::ProjKstats* temp = kstats_;
  kstats_ = NULL;
  return temp;
}
inline void ProjStats::set_allocated_kstats(::fantasybit::ProjKstats* kstats) {
  delete kstats_;
  kstats_ = kstats;
  if (kstats) {
    set_has_kstats();
  } else {
    clear_has_kstats();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace fantasybit

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ApiData_2eproto__INCLUDED
